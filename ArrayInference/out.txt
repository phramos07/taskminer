; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32* %v, i32* %s, i32 %n, i32 %m) #0 {
entry:
  call void @llvm.dbg.value(metadata i32* %v, i64 0, metadata !12, metadata !13), !dbg !14
  call void @llvm.dbg.value(metadata i32* %s, i64 0, metadata !15, metadata !13), !dbg !16
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !17, metadata !13), !dbg !18
  call void @llvm.dbg.value(metadata i32 %m, i64 0, metadata !19, metadata !13), !dbg !20
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !21, metadata !13), !dbg !23
  %cmp.10 = icmp slt i32 0, %n, !dbg !24
  br i1 %cmp.10, label %for.body.lr.ph, label %for.end, !dbg !26

for.body.lr.ph:                                   ; preds = %entry
  br label %for.body, !dbg !26

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %i.011 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %idxprom = sext i32 %i.011 to i64, !dbg !27
  %arrayidx = getelementptr inbounds i32, i32* %s, i64 %idxprom, !dbg !27
  %tmp = load i32, i32* %arrayidx, align 4, !dbg !27
  %idxprom1 = sext i32 %i.011 to i64, !dbg !28
  %arrayidx2 = getelementptr inbounds i32, i32* %v, i64 %idxprom1, !dbg !28
  store i32 %tmp, i32* %arrayidx2, align 4, !dbg !29
  br label %for.inc, !dbg !28

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.011, 1, !dbg !30
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !21, metadata !13), !dbg !23
  %cmp = icmp slt i32 %inc, %n, !dbg !24
  br i1 %cmp, label %for.body, label %for.cond.for.end_crit_edge, !dbg !26

for.cond.for.end_crit_edge:                       ; preds = %for.inc
  br label %for.end, !dbg !26

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !31, metadata !13), !dbg !33
  %cmp4.8 = icmp slt i32 0, %m, !dbg !34
  br i1 %cmp4.8, label %for.body.5.lr.ph, label %for.end.12, !dbg !36

for.body.5.lr.ph:                                 ; preds = %for.end
  br label %for.body.5, !dbg !36

for.body.5:                                       ; preds = %for.body.5.lr.ph, %for.inc.10
  %j.09 = phi i32 [ 0, %for.body.5.lr.ph ], [ %inc11, %for.inc.10 ]
  %idxprom6 = sext i32 %j.09 to i64, !dbg !37
  %arrayidx7 = getelementptr inbounds i32, i32* %v, i64 %idxprom6, !dbg !37
  %tmp1 = load i32, i32* %arrayidx7, align 4, !dbg !37
  %idxprom8 = sext i32 %j.09 to i64, !dbg !38
  %arrayidx9 = getelementptr inbounds i32, i32* %s, i64 %idxprom8, !dbg !38
  store i32 %tmp1, i32* %arrayidx9, align 4, !dbg !39
  br label %for.inc.10, !dbg !38

for.inc.10:                                       ; preds = %for.body.5
  %inc11 = add nsw i32 %j.09, 1, !dbg !40
  call void @llvm.dbg.value(metadata i32 %inc11, i64 0, metadata !31, metadata !13), !dbg !33
  %cmp4 = icmp slt i32 %inc11, %m, !dbg !34
  br i1 %cmp4, label %for.body.5, label %for.cond.3.for.end.12_crit_edge, !dbg !36

for.cond.3.for.end.12_crit_edge:                  ; preds = %for.inc.10
  br label %for.end.12, !dbg !36

for.end.12:                                       ; preds = %for.cond.3.for.end.12_crit_edge, %for.end
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !41, metadata !13), !dbg !43
  %cmp15.6 = icmp slt i32 0, %n, !dbg !44
  br i1 %cmp15.6, label %for.body.16.lr.ph, label %for.end.35, !dbg !46

for.body.16.lr.ph:                                ; preds = %for.end.12
  br label %for.body.16, !dbg !46

for.body.16:                                      ; preds = %for.body.16.lr.ph, %for.inc.33
  %i13.07 = phi i32 [ 0, %for.body.16.lr.ph ], [ %inc34, %for.inc.33 ]
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !47, metadata !13), !dbg !49
  %cmp19.4 = icmp slt i32 0, %m, !dbg !50
  br i1 %cmp19.4, label %for.body.20.lr.ph, label %for.end.32, !dbg !52

for.body.20.lr.ph:                                ; preds = %for.body.16
  br label %for.body.20, !dbg !52

for.body.20:                                      ; preds = %for.body.20.lr.ph, %for.inc.30
  %j17.05 = phi i32 [ 0, %for.body.20.lr.ph ], [ %inc31, %for.inc.30 ]
  %add = add nsw i32 %i13.07, %j17.05, !dbg !53
  %idxprom21 = sext i32 %add to i64, !dbg !54
  %arrayidx22 = getelementptr inbounds i32, i32* %s, i64 %idxprom21, !dbg !54
  %tmp2 = load i32, i32* %arrayidx22, align 4, !dbg !54
  %mul = mul nsw i32 %i13.07, %j17.05, !dbg !55
  %idxprom23 = sext i32 %mul to i64, !dbg !56
  %arrayidx24 = getelementptr inbounds i32, i32* %s, i64 %idxprom23, !dbg !56
  %tmp3 = load i32, i32* %arrayidx24, align 4, !dbg !56
  %add25 = add nsw i32 %tmp2, %tmp3, !dbg !57
  %mul26 = mul nsw i32 %i13.07, %m, !dbg !58
  %add27 = add nsw i32 %mul26, %j17.05, !dbg !59
  %idxprom28 = sext i32 %add27 to i64, !dbg !60
  %arrayidx29 = getelementptr inbounds i32, i32* %v, i64 %idxprom28, !dbg !60
  store i32 %add25, i32* %arrayidx29, align 4, !dbg !61
  br label %for.inc.30, !dbg !60

for.inc.30:                                       ; preds = %for.body.20
  %inc31 = add nsw i32 %j17.05, 1, !dbg !62
  call void @llvm.dbg.value(metadata i32 %inc31, i64 0, metadata !47, metadata !13), !dbg !49
  %cmp19 = icmp slt i32 %inc31, %m, !dbg !50
  br i1 %cmp19, label %for.body.20, label %for.cond.18.for.end.32_crit_edge, !dbg !52

for.cond.18.for.end.32_crit_edge:                 ; preds = %for.inc.30
  br label %for.end.32, !dbg !52

for.end.32:                                       ; preds = %for.cond.18.for.end.32_crit_edge, %for.body.16
  br label %for.inc.33, !dbg !63

for.inc.33:                                       ; preds = %for.end.32
  %inc34 = add nsw i32 %i13.07, 1, !dbg !64
  call void @llvm.dbg.value(metadata i32 %inc34, i64 0, metadata !41, metadata !13), !dbg !43
  %cmp15 = icmp slt i32 %inc34, %n, !dbg !44
  br i1 %cmp15, label %for.body.16, label %for.cond.14.for.end.35_crit_edge, !dbg !46

for.cond.14.for.end.35_crit_edge:                 ; preds = %for.inc.33
  br label %for.end.35, !dbg !46

for.end.35:                                       ; preds = %for.cond.14.for.end.35_crit_edge, %for.end.12
  ret void, !dbg !65
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/src/ArrayInference/tests/test26.c", directory: "/home/gleison/lge/dawn-3.7/src/ArrayInference")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 1, type: !5, isLocal: false, isDefinition: true, scopeLine: 1, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32*, i32, i32)* @foo, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !8, !8}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !{i32 2, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !4, file: !1, line: 1, type: !7)
!13 = !DIExpression()
!14 = !DILocation(line: 1, column: 15, scope: !4)
!15 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 2, scope: !4, file: !1, line: 1, type: !7)
!16 = !DILocation(line: 1, column: 23, scope: !4)
!17 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 1, type: !8)
!18 = !DILocation(line: 1, column: 30, scope: !4)
!19 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 4, scope: !4, file: !1, line: 1, type: !8)
!20 = !DILocation(line: 1, column: 37, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !22, file: !1, line: 3, type: !8)
!22 = distinct !DILexicalBlock(scope: !4, file: !1, line: 3, column: 3)
!23 = !DILocation(line: 3, column: 12, scope: !22)
!24 = !DILocation(line: 3, column: 21, scope: !25)
!25 = distinct !DILexicalBlock(scope: !22, file: !1, line: 3, column: 3)
!26 = !DILocation(line: 3, column: 3, scope: !22)
!27 = !DILocation(line: 4, column: 12, scope: !25)
!28 = !DILocation(line: 4, column: 5, scope: !25)
!29 = !DILocation(line: 4, column: 10, scope: !25)
!30 = !DILocation(line: 3, column: 27, scope: !25)
!31 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !32, file: !1, line: 6, type: !8)
!32 = distinct !DILexicalBlock(scope: !4, file: !1, line: 6, column: 3)
!33 = !DILocation(line: 6, column: 12, scope: !32)
!34 = !DILocation(line: 6, column: 21, scope: !35)
!35 = distinct !DILexicalBlock(scope: !32, file: !1, line: 6, column: 3)
!36 = !DILocation(line: 6, column: 3, scope: !32)
!37 = !DILocation(line: 7, column: 12, scope: !35)
!38 = !DILocation(line: 7, column: 5, scope: !35)
!39 = !DILocation(line: 7, column: 10, scope: !35)
!40 = !DILocation(line: 6, column: 27, scope: !35)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !42, file: !1, line: 9, type: !8)
!42 = distinct !DILexicalBlock(scope: !4, file: !1, line: 9, column: 3)
!43 = !DILocation(line: 9, column: 12, scope: !42)
!44 = !DILocation(line: 9, column: 21, scope: !45)
!45 = distinct !DILexicalBlock(scope: !42, file: !1, line: 9, column: 3)
!46 = !DILocation(line: 9, column: 3, scope: !42)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !48, file: !1, line: 10, type: !8)
!48 = distinct !DILexicalBlock(scope: !45, file: !1, line: 10, column: 5)
!49 = !DILocation(line: 10, column: 14, scope: !48)
!50 = !DILocation(line: 10, column: 23, scope: !51)
!51 = distinct !DILexicalBlock(scope: !48, file: !1, line: 10, column: 5)
!52 = !DILocation(line: 10, column: 5, scope: !48)
!53 = !DILocation(line: 11, column: 26, scope: !51)
!54 = !DILocation(line: 11, column: 22, scope: !51)
!55 = !DILocation(line: 11, column: 37, scope: !51)
!56 = !DILocation(line: 11, column: 33, scope: !51)
!57 = !DILocation(line: 11, column: 31, scope: !51)
!58 = !DILocation(line: 11, column: 11, scope: !51)
!59 = !DILocation(line: 11, column: 15, scope: !51)
!60 = !DILocation(line: 11, column: 7, scope: !51)
!61 = !DILocation(line: 11, column: 20, scope: !51)
!62 = !DILocation(line: 10, column: 29, scope: !51)
!63 = !DILocation(line: 11, column: 40, scope: !48)
!64 = !DILocation(line: 9, column: 27, scope: !45)
!65 = !DILocation(line: 12, column: 1, scope: !4)
