; ModuleID = '/home/gleison/lge/dawn-3.7/src/ArrayInference/tests/testMul.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32* %a, i32 %s1, i32 %s2, i32 %n, i32 %m) #0 {
entry:
  %a.addr = alloca i32*, align 8
  %s1.addr = alloca i32, align 4
  %s2.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !12, metadata !13), !dbg !14
  store i32 %s1, i32* %s1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s1.addr, metadata !15, metadata !13), !dbg !16
  store i32 %s2, i32* %s2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s2.addr, metadata !17, metadata !13), !dbg !18
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19, metadata !13), !dbg !20
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !21, metadata !13), !dbg !22
  call void @llvm.dbg.declare(metadata i32* %i, metadata !23, metadata !13), !dbg !24
  call void @llvm.dbg.declare(metadata i32* %j, metadata !25, metadata !13), !dbg !26
  %0 = load i32, i32* %s1.addr, align 4, !dbg !27
  store i32 %0, i32* %i, align 4, !dbg !29
  br label %for.cond, !dbg !30

for.cond:                                         ; preds = %for.inc.5, %entry
  %1 = load i32, i32* %i, align 4, !dbg !31
  %2 = load i32, i32* %n.addr, align 4, !dbg !35
  %cmp = icmp slt i32 %1, %2, !dbg !36
  br i1 %cmp, label %for.body, label %for.end.7, !dbg !37

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %s2.addr, align 4, !dbg !38
  store i32 %3, i32* %j, align 4, !dbg !41
  br label %for.cond.1, !dbg !42

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !43
  %5 = load i32, i32* %m.addr, align 4, !dbg !47
  %cmp2 = icmp slt i32 %4, %5, !dbg !48
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !49

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4, !dbg !50
  %7 = load i32, i32* %j, align 4, !dbg !52
  %mul = mul nsw i32 %6, %7, !dbg !53
  %8 = load i32, i32* %i, align 4, !dbg !54
  %9 = load i32, i32* %m.addr, align 4, !dbg !55
  %mul4 = mul nsw i32 %8, %9, !dbg !56
  %10 = load i32, i32* %j, align 4, !dbg !57
  %add = add nsw i32 %mul4, %10, !dbg !58
  %idxprom = sext i32 %add to i64, !dbg !59
  %11 = load i32*, i32** %a.addr, align 8, !dbg !59
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !59
  store i32 %mul, i32* %arrayidx, align 4, !dbg !60
  br label %for.inc, !dbg !61

for.inc:                                          ; preds = %for.body.3
  %12 = load i32, i32* %j, align 4, !dbg !62
  %inc = add nsw i32 %12, 1, !dbg !62
  store i32 %inc, i32* %j, align 4, !dbg !62
  br label %for.cond.1, !dbg !63

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.5, !dbg !64

for.inc.5:                                        ; preds = %for.end
  %13 = load i32, i32* %i, align 4, !dbg !65
  %inc6 = add nsw i32 %13, 1, !dbg !65
  store i32 %inc6, i32* %i, align 4, !dbg !65
  br label %for.cond, !dbg !66

for.end.7:                                        ; preds = %for.cond
  ret void, !dbg !67
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/src/ArrayInference/tests/testMul.c", directory: "/home/gleison/lge/dawn-3.7/src/ArrayInference")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32, i32, i32, i32)* @foo, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !8, !8, !8, !8}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !{i32 2, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!13 = !DIExpression()
!14 = !DILocation(line: 4, column: 15, scope: !4)
!15 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s1", arg: 2, scope: !4, file: !1, line: 4, type: !8)
!16 = !DILocation(line: 4, column: 22, scope: !4)
!17 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s2", arg: 3, scope: !4, file: !1, line: 4, type: !8)
!18 = !DILocation(line: 4, column: 30, scope: !4)
!19 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 4, scope: !4, file: !1, line: 4, type: !8)
!20 = !DILocation(line: 4, column: 38, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 5, scope: !4, file: !1, line: 4, type: !8)
!22 = !DILocation(line: 4, column: 45, scope: !4)
!23 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !4, file: !1, line: 5, type: !8)
!24 = !DILocation(line: 5, column: 7, scope: !4)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !4, file: !1, line: 5, type: !8)
!26 = !DILocation(line: 5, column: 10, scope: !4)
!27 = !DILocation(line: 6, column: 12, scope: !28)
!28 = distinct !DILexicalBlock(scope: !4, file: !1, line: 6, column: 3)
!29 = !DILocation(line: 6, column: 10, scope: !28)
!30 = !DILocation(line: 6, column: 8, scope: !28)
!31 = !DILocation(line: 6, column: 16, scope: !32)
!32 = !DILexicalBlockFile(scope: !33, file: !1, discriminator: 2)
!33 = !DILexicalBlockFile(scope: !34, file: !1, discriminator: 1)
!34 = distinct !DILexicalBlock(scope: !28, file: !1, line: 6, column: 3)
!35 = !DILocation(line: 6, column: 20, scope: !34)
!36 = !DILocation(line: 6, column: 18, scope: !34)
!37 = !DILocation(line: 6, column: 3, scope: !28)
!38 = !DILocation(line: 7, column: 14, scope: !39)
!39 = distinct !DILexicalBlock(scope: !40, file: !1, line: 7, column: 5)
!40 = distinct !DILexicalBlock(scope: !34, file: !1, line: 6, column: 28)
!41 = !DILocation(line: 7, column: 12, scope: !39)
!42 = !DILocation(line: 7, column: 10, scope: !39)
!43 = !DILocation(line: 7, column: 18, scope: !44)
!44 = !DILexicalBlockFile(scope: !45, file: !1, discriminator: 2)
!45 = !DILexicalBlockFile(scope: !46, file: !1, discriminator: 1)
!46 = distinct !DILexicalBlock(scope: !39, file: !1, line: 7, column: 5)
!47 = !DILocation(line: 7, column: 22, scope: !46)
!48 = !DILocation(line: 7, column: 20, scope: !46)
!49 = !DILocation(line: 7, column: 5, scope: !39)
!50 = !DILocation(line: 8, column: 22, scope: !51)
!51 = distinct !DILexicalBlock(scope: !46, file: !1, line: 7, column: 30)
!52 = !DILocation(line: 8, column: 26, scope: !51)
!53 = !DILocation(line: 8, column: 24, scope: !51)
!54 = !DILocation(line: 8, column: 9, scope: !51)
!55 = !DILocation(line: 8, column: 13, scope: !51)
!56 = !DILocation(line: 8, column: 11, scope: !51)
!57 = !DILocation(line: 8, column: 17, scope: !51)
!58 = !DILocation(line: 8, column: 15, scope: !51)
!59 = !DILocation(line: 8, column: 7, scope: !51)
!60 = !DILocation(line: 8, column: 20, scope: !51)
!61 = !DILocation(line: 9, column: 5, scope: !51)
!62 = !DILocation(line: 7, column: 26, scope: !46)
!63 = !DILocation(line: 7, column: 5, scope: !46)
!64 = !DILocation(line: 10, column: 3, scope: !40)
!65 = !DILocation(line: 6, column: 24, scope: !34)
!66 = !DILocation(line: 6, column: 3, scope: !34)
!67 = !DILocation(line: 11, column: 1, scope: !4)
