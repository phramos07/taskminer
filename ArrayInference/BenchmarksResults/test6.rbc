; ModuleID = '/home/gleison/lge/dawn-3.7/src/ArrayInference/tests//test6.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@vectorE = common global i32* null, align 8

; Function Attrs: nounwind uwtable
define void @foo(i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !22, metadata !23), !dbg !24
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !23), !dbg !26
  %cmp.1 = icmp sgt i32 %n, 0, !dbg !27
  br i1 %cmp.1, label %for.body.preheader, label %for.end, !dbg !30

for.body.preheader:                               ; preds = %entry
  %0 = add i32 %n, -1, !dbg !31
  %xtraiter = and i32 %n, 3, !dbg !31
  %lcmp.mod = icmp eq i32 %xtraiter, 0, !dbg !31
  br i1 %lcmp.mod, label %for.body.preheader.split, label %for.body.prol.preheader, !dbg !31

for.body.prol.preheader:                          ; preds = %for.body.preheader
  br label %for.body.prol, !dbg !31

for.body.prol:                                    ; preds = %for.body.prol.preheader, %for.body.prol
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body.prol ], [ 0, %for.body.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body.prol ], [ %xtraiter, %for.body.prol.preheader ]
  %1 = load i32*, i32** @vectorE, align 8, !dbg !31
  %arrayidx.prol = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.prol, !dbg !31
  %2 = trunc i64 %indvars.iv.prol to i32, !dbg !32
  store i32 %2, i32* %arrayidx.prol, align 4, !dbg !32
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1, !dbg !30
  %prol.iter.sub = add i32 %prol.iter, -1, !dbg !30
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0, !dbg !30
  br i1 %prol.iter.cmp, label %for.body.preheader.split.loopexit, label %for.body.prol, !dbg !30, !llvm.loop !33

for.body.preheader.split.loopexit:                ; preds = %for.body.prol
  %indvars.iv.next.prol.lcssa = phi i64 [ %indvars.iv.next.prol, %for.body.prol ]
  br label %for.body.preheader.split, !dbg !31

for.body.preheader.split:                         ; preds = %for.body.preheader.split.loopexit, %for.body.preheader
  %indvars.iv.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next.prol.lcssa, %for.body.preheader.split.loopexit ]
  %3 = icmp ult i32 %0, 3, !dbg !31
  br i1 %3, label %for.end.loopexit, label %for.body.preheader.split.split, !dbg !31

for.body.preheader.split.split:                   ; preds = %for.body.preheader.split
  br label %for.body, !dbg !31

for.body:                                         ; preds = %for.body, %for.body.preheader.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %for.body.preheader.split.split ], [ %indvars.iv.next.3, %for.body ]
  %4 = load i32*, i32** @vectorE, align 8, !dbg !31
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %indvars.iv, !dbg !31
  %5 = trunc i64 %indvars.iv to i32, !dbg !32
  store i32 %5, i32* %arrayidx, align 4, !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !30
  %6 = load i32*, i32** @vectorE, align 8, !dbg !31
  %arrayidx.1 = getelementptr inbounds i32, i32* %6, i64 %indvars.iv.next, !dbg !31
  %7 = trunc i64 %indvars.iv.next to i32, !dbg !32
  store i32 %7, i32* %arrayidx.1, align 4, !dbg !32
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2, !dbg !30
  %8 = load i32*, i32** @vectorE, align 8, !dbg !31
  %arrayidx.2 = getelementptr inbounds i32, i32* %8, i64 %indvars.iv.next.1, !dbg !31
  %9 = trunc i64 %indvars.iv.next.1 to i32, !dbg !32
  store i32 %9, i32* %arrayidx.2, align 4, !dbg !32
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3, !dbg !30
  %10 = load i32*, i32** @vectorE, align 8, !dbg !31
  %arrayidx.3 = getelementptr inbounds i32, i32* %10, i64 %indvars.iv.next.2, !dbg !31
  %11 = trunc i64 %indvars.iv.next.2 to i32, !dbg !32
  store i32 %11, i32* %arrayidx.3, align 4, !dbg !32
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4, !dbg !30
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32, !dbg !30
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %n, !dbg !30
  br i1 %exitcond.3, label %for.end.loopexit.unr-lcssa, label %for.body, !dbg !30

for.end.loopexit.unr-lcssa:                       ; preds = %for.body
  br label %for.end.loopexit, !dbg !35

for.end.loopexit:                                 ; preds = %for.body.preheader.split, %for.end.loopexit.unr-lcssa
  br label %for.end, !dbg !35

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void, !dbg !35
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readnone %argv) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !36, metadata !23), !dbg !37
  tail call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !38, metadata !23), !dbg !39
  %call = tail call noalias i8* @malloc(i64 400) #3, !dbg !40
  store i8* %call, i8** bitcast (i32** @vectorE to i8**), align 8, !dbg !41
  tail call void @llvm.dbg.value(metadata i32 100, i64 0, metadata !22, metadata !23), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !23), !dbg !44
  %0 = bitcast i8* %call to i32*, !dbg !45
  store i32 0, i32* %0, align 4, !dbg !46
  br label %for.body.i.for.body.i_crit_edge, !dbg !47

for.body.i.for.body.i_crit_edge:                  ; preds = %for.body.i.for.body.i_crit_edge, %entry
  %indvars.iv.next.i1 = phi i64 [ 1, %entry ], [ %indvars.iv.next.i.2, %for.body.i.for.body.i_crit_edge ]
  %.pre = load i32*, i32** @vectorE, align 8, !dbg !48
  %arrayidx.i = getelementptr inbounds i32, i32* %.pre, i64 %indvars.iv.next.i1, !dbg !48
  %1 = trunc i64 %indvars.iv.next.i1 to i32, !dbg !46
  store i32 %1, i32* %arrayidx.i, align 4, !dbg !46
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i1, 1, !dbg !47
  %.pre.1 = load i32*, i32** @vectorE, align 8, !dbg !48
  %arrayidx.i.1 = getelementptr inbounds i32, i32* %.pre.1, i64 %indvars.iv.next.i, !dbg !48
  %2 = trunc i64 %indvars.iv.next.i to i32, !dbg !46
  store i32 %2, i32* %arrayidx.i.1, align 4, !dbg !46
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.next.i1, 2, !dbg !47
  %.pre.2 = load i32*, i32** @vectorE, align 8, !dbg !48
  %arrayidx.i.2 = getelementptr inbounds i32, i32* %.pre.2, i64 %indvars.iv.next.i.1, !dbg !48
  %3 = trunc i64 %indvars.iv.next.i.1 to i32, !dbg !46
  store i32 %3, i32* %arrayidx.i.2, align 4, !dbg !46
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.next.i1, 3, !dbg !47
  %exitcond.2 = icmp eq i64 %indvars.iv.next.i.2, 100, !dbg !47
  br i1 %exitcond.2, label %foo.exit, label %for.body.i.for.body.i_crit_edge, !dbg !47

foo.exit:                                         ; preds = %for.body.i.for.body.i_crit_edge
  ret i32 0, !dbg !49
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!19, !20}
!llvm.ident = !{!21}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6, globals: !17)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/src/ArrayInference/tests/test6.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!6 = !{!7, !11}
!7 = !DISubprogram(name: "foo", scope: !8, file: !8, line: 6, type: !9, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @foo, variables: !2)
!8 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/src/ArrayInference/tests//test6.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!9 = !DISubroutineType(types: !10)
!10 = !{null, !5}
!11 = !DISubprogram(name: "main", scope: !8, file: !8, line: 12, type: !12, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{!5, !5, !14}
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64, align: 64)
!16 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!17 = !{!18}
!18 = !DIGlobalVariable(name: "vectorE", scope: !0, file: !8, line: 4, type: !4, isLocal: false, isDefinition: true, variable: i32** @vectorE)
!19 = !{i32 2, !"Dwarf Version", i32 4}
!20 = !{i32 2, !"Debug Info Version", i32 3}
!21 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !7, file: !8, line: 6, type: !5)
!23 = !DIExpression()
!24 = !DILocation(line: 6, column: 15, scope: !7)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !7, file: !8, line: 7, type: !5)
!26 = !DILocation(line: 7, column: 7, scope: !7)
!27 = !DILocation(line: 8, column: 17, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !8, line: 8, column: 3)
!29 = distinct !DILexicalBlock(scope: !7, file: !8, line: 8, column: 3)
!30 = !DILocation(line: 8, column: 3, scope: !29)
!31 = !DILocation(line: 9, column: 5, scope: !28)
!32 = !DILocation(line: 9, column: 16, scope: !28)
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.unroll.disable"}
!35 = !DILocation(line: 10, column: 1, scope: !7)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !11, file: !8, line: 12, type: !5)
!37 = !DILocation(line: 12, column: 15, scope: !11)
!38 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !11, file: !8, line: 12, type: !14)
!39 = !DILocation(line: 12, column: 27, scope: !11)
!40 = !DILocation(line: 13, column: 20, scope: !11)
!41 = !DILocation(line: 13, column: 11, scope: !11)
!42 = !DILocation(line: 6, column: 15, scope: !7, inlinedAt: !43)
!43 = distinct !DILocation(line: 14, column: 3, scope: !11)
!44 = !DILocation(line: 7, column: 7, scope: !7, inlinedAt: !43)
!45 = !DILocation(line: 14, column: 3, scope: !11)
!46 = !DILocation(line: 9, column: 16, scope: !28, inlinedAt: !43)
!47 = !DILocation(line: 8, column: 3, scope: !29, inlinedAt: !43)
!48 = !DILocation(line: 9, column: 5, scope: !28, inlinedAt: !43)
!49 = !DILocation(line: 15, column: 3, scope: !11)
