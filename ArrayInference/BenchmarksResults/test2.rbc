; ModuleID = '/home/gleison/lge/dawn-3.7/src/ArrayInference/tests//test2.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @func(i32 %a, i32 %b, i32* %n) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %n.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !18, metadata !19), !dbg !20
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !21, metadata !19), !dbg !22
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !23, metadata !19), !dbg !24
  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !19), !dbg !27
  store i32 0, i32* %i, align 4, !dbg !27
  br label %for.cond, !dbg !28

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !29
  %1 = load i32, i32* %b.addr, align 4, !dbg !33
  %cmp = icmp slt i32 %0, %1, !dbg !34
  br i1 %cmp, label %for.body, label %for.end, !dbg !35

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !36
  %idxprom = sext i32 %2 to i64, !dbg !38
  %3 = load i32*, i32** %n.addr, align 8, !dbg !38
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !38
  %4 = load i32, i32* %arrayidx, align 4, !dbg !38
  %add = add nsw i32 %4, 1, !dbg !39
  %5 = load i32, i32* %i, align 4, !dbg !40
  %idxprom1 = sext i32 %5 to i64, !dbg !41
  %6 = load i32*, i32** %n.addr, align 8, !dbg !41
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom1, !dbg !41
  store i32 %add, i32* %arrayidx2, align 4, !dbg !42
  br label %for.inc, !dbg !43

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !44
  %add3 = add nsw i32 %7, 2, !dbg !44
  store i32 %add3, i32* %i, align 4, !dbg !44
  br label %for.cond, !dbg !45

for.end:                                          ; preds = %for.cond
  ret void, !dbg !46
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @funcA(i32 %a, i32 %b, i32* %n) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %n.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !47, metadata !19), !dbg !48
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !49, metadata !19), !dbg !50
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !51, metadata !19), !dbg !52
  call void @llvm.dbg.declare(metadata i32* %i, metadata !53, metadata !19), !dbg !55
  store i32 0, i32* %i, align 4, !dbg !55
  br label %for.cond, !dbg !56

for.cond:                                         ; preds = %for.inc.5, %entry
  %0 = load i32, i32* %i, align 4, !dbg !57
  %1 = load i32, i32* %b.addr, align 4, !dbg !61
  %cmp = icmp slt i32 %0, %1, !dbg !62
  br i1 %cmp, label %for.body, label %for.end.7, !dbg !63

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %j, metadata !64, metadata !19), !dbg !67
  store i32 0, i32* %j, align 4, !dbg !67
  br label %for.cond.1, !dbg !68

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !69
  %3 = load i32, i32* %a.addr, align 4, !dbg !73
  %cmp2 = icmp slt i32 %2, %3, !dbg !74
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !75

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %i, align 4, !dbg !76
  %5 = load i32, i32* %j, align 4, !dbg !78
  %add = add nsw i32 %4, %5, !dbg !79
  %6 = load i32, i32* %i, align 4, !dbg !80
  %7 = load i32, i32* %a.addr, align 4, !dbg !81
  %mul = mul nsw i32 %6, %7, !dbg !82
  %8 = load i32, i32* %j, align 4, !dbg !83
  %add4 = add nsw i32 %mul, %8, !dbg !84
  %idxprom = sext i32 %add4 to i64, !dbg !85
  %9 = load i32*, i32** %n.addr, align 8, !dbg !85
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !85
  store i32 %add, i32* %arrayidx, align 4, !dbg !86
  br label %for.inc, !dbg !87

for.inc:                                          ; preds = %for.body.3
  %10 = load i32, i32* %j, align 4, !dbg !88
  %inc = add nsw i32 %10, 1, !dbg !88
  store i32 %inc, i32* %j, align 4, !dbg !88
  br label %for.cond.1, !dbg !89

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.5, !dbg !90

for.inc.5:                                        ; preds = %for.end
  %11 = load i32, i32* %i, align 4, !dbg !91
  %inc6 = add nsw i32 %11, 1, !dbg !91
  store i32 %inc6, i32* %i, align 4, !dbg !91
  br label %for.cond, !dbg !92

for.end.7:                                        ; preds = %for.cond
  ret void, !dbg !93
}

; Function Attrs: nounwind uwtable
define void @funcB(i32 %a, i32 %b, i32* %m) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %m.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !94, metadata !19), !dbg !95
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !96, metadata !19), !dbg !97
  store i32* %m, i32** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %m.addr, metadata !98, metadata !19), !dbg !99
  call void @llvm.dbg.declare(metadata i32* %i, metadata !100, metadata !19), !dbg !101
  store i32 0, i32* %i, align 4, !dbg !102
  br label %for.cond, !dbg !104

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !105
  %1 = load i32, i32* %a.addr, align 4, !dbg !109
  %cmp = icmp slt i32 %0, %1, !dbg !110
  br i1 %cmp, label %for.body, label %for.end, !dbg !111

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !112
  %3 = load i32, i32* %i, align 4, !dbg !114
  %mul = mul nsw i32 %3, 4, !dbg !115
  %idxprom = sext i32 %mul to i64, !dbg !116
  %4 = load i32*, i32** %m.addr, align 8, !dbg !116
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !116
  store i32 %2, i32* %arrayidx, align 4, !dbg !117
  br label %for.inc, !dbg !118

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !119
  %inc = add nsw i32 %5, 1, !dbg !119
  store i32 %inc, i32* %i, align 4, !dbg !119
  br label %for.cond, !dbg !120

for.end:                                          ; preds = %for.cond
  ret void, !dbg !121
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %pont = alloca [43 x i32], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata [43 x i32]* %pont, metadata !122, metadata !19), !dbg !126
  call void @llvm.dbg.declare(metadata i32* %i, metadata !127, metadata !19), !dbg !128
  store i32 0, i32* %i, align 4, !dbg !129
  br label %for.cond, !dbg !131

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !132
  %cmp = icmp sle i32 %0, 42, !dbg !136
  br i1 %cmp, label %for.body, label %for.end, !dbg !137

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !138
  %idxprom = sext i32 %1 to i64, !dbg !139
  %arrayidx = getelementptr inbounds [43 x i32], [43 x i32]* %pont, i32 0, i64 %idxprom, !dbg !139
  store i32 0, i32* %arrayidx, align 4, !dbg !140
  br label %for.inc, !dbg !139

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !141
  %inc = add nsw i32 %2, 1, !dbg !141
  store i32 %inc, i32* %i, align 4, !dbg !141
  br label %for.cond, !dbg !142

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !143
  br label %for.cond.1, !dbg !145

for.cond.1:                                       ; preds = %for.inc.6, %for.end
  %3 = load i32, i32* %i, align 4, !dbg !146
  %cmp2 = icmp slt i32 %3, 42, !dbg !150
  br i1 %cmp2, label %for.body.3, label %for.end.8, !dbg !151

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %i, align 4, !dbg !152
  %idxprom4 = sext i32 %4 to i64, !dbg !153
  %arrayidx5 = getelementptr inbounds [43 x i32], [43 x i32]* %pont, i32 0, i64 %idxprom4, !dbg !153
  %5 = load i32, i32* %arrayidx5, align 4, !dbg !154
  %add = add nsw i32 %5, 100, !dbg !154
  store i32 %add, i32* %arrayidx5, align 4, !dbg !154
  br label %for.inc.6, !dbg !153

for.inc.6:                                        ; preds = %for.body.3
  %6 = load i32, i32* %i, align 4, !dbg !155
  %inc7 = add nsw i32 %6, 1, !dbg !155
  store i32 %inc7, i32* %i, align 4, !dbg !155
  br label %for.cond.1, !dbg !156

for.end.8:                                        ; preds = %for.cond.1
  ret i32 0, !dbg !157
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/src/ArrayInference/tests/test2.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!2 = !{}
!3 = !{!4, !10, !11, !12}
!4 = !DISubprogram(name: "func", scope: !5, file: !5, line: 4, type: !6, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, i32*)* @func, variables: !2)
!5 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/src/ArrayInference/tests//test2.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!6 = !DISubroutineType(types: !7)
!7 = !{null, !8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!10 = !DISubprogram(name: "funcA", scope: !5, file: !5, line: 10, type: !6, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, i32*)* @funcA, variables: !2)
!11 = !DISubprogram(name: "funcB", scope: !5, file: !5, line: 19, type: !6, isLocal: false, isDefinition: true, scopeLine: 19, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, i32*)* @funcB, variables: !2)
!12 = !DISubprogram(name: "main", scope: !5, file: !5, line: 26, type: !13, isLocal: false, isDefinition: true, scopeLine: 26, isOptimized: false, function: i32 ()* @main, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{!8}
!15 = !{i32 2, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !5, line: 4, type: !8)
!19 = !DIExpression()
!20 = !DILocation(line: 4, column: 15, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !5, line: 4, type: !8)
!22 = !DILocation(line: 4, column: 22, scope: !4)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !5, line: 4, type: !9)
!24 = !DILocation(line: 4, column: 30, scope: !4)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !5, line: 5, type: !8)
!26 = distinct !DILexicalBlock(scope: !4, file: !5, line: 5, column: 3)
!27 = !DILocation(line: 5, column: 12, scope: !26)
!28 = !DILocation(line: 5, column: 8, scope: !26)
!29 = !DILocation(line: 5, column: 19, scope: !30)
!30 = !DILexicalBlockFile(scope: !31, file: !5, discriminator: 2)
!31 = !DILexicalBlockFile(scope: !32, file: !5, discriminator: 1)
!32 = distinct !DILexicalBlock(scope: !26, file: !5, line: 5, column: 3)
!33 = !DILocation(line: 5, column: 23, scope: !32)
!34 = !DILocation(line: 5, column: 21, scope: !32)
!35 = !DILocation(line: 5, column: 3, scope: !26)
!36 = !DILocation(line: 6, column: 15, scope: !37)
!37 = distinct !DILexicalBlock(scope: !32, file: !5, line: 5, column: 33)
!38 = !DILocation(line: 6, column: 13, scope: !37)
!39 = !DILocation(line: 6, column: 18, scope: !37)
!40 = !DILocation(line: 6, column: 8, scope: !37)
!41 = !DILocation(line: 6, column: 6, scope: !37)
!42 = !DILocation(line: 6, column: 11, scope: !37)
!43 = !DILocation(line: 7, column: 3, scope: !37)
!44 = !DILocation(line: 5, column: 27, scope: !32)
!45 = !DILocation(line: 5, column: 3, scope: !32)
!46 = !DILocation(line: 8, column: 1, scope: !4)
!47 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !10, file: !5, line: 10, type: !8)
!48 = !DILocation(line: 10, column: 16, scope: !10)
!49 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !10, file: !5, line: 10, type: !8)
!50 = !DILocation(line: 10, column: 23, scope: !10)
!51 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !10, file: !5, line: 10, type: !9)
!52 = !DILocation(line: 10, column: 31, scope: !10)
!53 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !54, file: !5, line: 11, type: !8)
!54 = distinct !DILexicalBlock(scope: !10, file: !5, line: 11, column: 3)
!55 = !DILocation(line: 11, column: 12, scope: !54)
!56 = !DILocation(line: 11, column: 8, scope: !54)
!57 = !DILocation(line: 11, column: 19, scope: !58)
!58 = !DILexicalBlockFile(scope: !59, file: !5, discriminator: 2)
!59 = !DILexicalBlockFile(scope: !60, file: !5, discriminator: 1)
!60 = distinct !DILexicalBlock(scope: !54, file: !5, line: 11, column: 3)
!61 = !DILocation(line: 11, column: 23, scope: !60)
!62 = !DILocation(line: 11, column: 21, scope: !60)
!63 = !DILocation(line: 11, column: 3, scope: !54)
!64 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !65, file: !5, line: 12, type: !8)
!65 = distinct !DILexicalBlock(scope: !66, file: !5, line: 12, column: 5)
!66 = distinct !DILexicalBlock(scope: !60, file: !5, line: 11, column: 31)
!67 = !DILocation(line: 12, column: 14, scope: !65)
!68 = !DILocation(line: 12, column: 10, scope: !65)
!69 = !DILocation(line: 12, column: 21, scope: !70)
!70 = !DILexicalBlockFile(scope: !71, file: !5, discriminator: 2)
!71 = !DILexicalBlockFile(scope: !72, file: !5, discriminator: 1)
!72 = distinct !DILexicalBlock(scope: !65, file: !5, line: 12, column: 5)
!73 = !DILocation(line: 12, column: 25, scope: !72)
!74 = !DILocation(line: 12, column: 23, scope: !72)
!75 = !DILocation(line: 12, column: 5, scope: !65)
!76 = !DILocation(line: 13, column: 22, scope: !77)
!77 = distinct !DILexicalBlock(scope: !72, file: !5, line: 12, column: 33)
!78 = !DILocation(line: 13, column: 26, scope: !77)
!79 = !DILocation(line: 13, column: 24, scope: !77)
!80 = !DILocation(line: 13, column: 9, scope: !77)
!81 = !DILocation(line: 13, column: 13, scope: !77)
!82 = !DILocation(line: 13, column: 11, scope: !77)
!83 = !DILocation(line: 13, column: 17, scope: !77)
!84 = !DILocation(line: 13, column: 15, scope: !77)
!85 = !DILocation(line: 13, column: 7, scope: !77)
!86 = !DILocation(line: 13, column: 20, scope: !77)
!87 = !DILocation(line: 14, column: 5, scope: !77)
!88 = !DILocation(line: 12, column: 29, scope: !72)
!89 = !DILocation(line: 12, column: 5, scope: !72)
!90 = !DILocation(line: 15, column: 3, scope: !66)
!91 = !DILocation(line: 11, column: 27, scope: !60)
!92 = !DILocation(line: 11, column: 3, scope: !60)
!93 = !DILocation(line: 16, column: 1, scope: !10)
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !11, file: !5, line: 19, type: !8)
!95 = !DILocation(line: 19, column: 16, scope: !11)
!96 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !11, file: !5, line: 19, type: !8)
!97 = !DILocation(line: 19, column: 23, scope: !11)
!98 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 3, scope: !11, file: !5, line: 19, type: !9)
!99 = !DILocation(line: 19, column: 31, scope: !11)
!100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !11, file: !5, line: 20, type: !8)
!101 = !DILocation(line: 20, column: 7, scope: !11)
!102 = !DILocation(line: 21, column: 10, scope: !103)
!103 = distinct !DILexicalBlock(scope: !11, file: !5, line: 21, column: 3)
!104 = !DILocation(line: 21, column: 8, scope: !103)
!105 = !DILocation(line: 21, column: 15, scope: !106)
!106 = !DILexicalBlockFile(scope: !107, file: !5, discriminator: 2)
!107 = !DILexicalBlockFile(scope: !108, file: !5, discriminator: 1)
!108 = distinct !DILexicalBlock(scope: !103, file: !5, line: 21, column: 3)
!109 = !DILocation(line: 21, column: 19, scope: !108)
!110 = !DILocation(line: 21, column: 17, scope: !108)
!111 = !DILocation(line: 21, column: 3, scope: !103)
!112 = !DILocation(line: 22, column: 14, scope: !113)
!113 = distinct !DILexicalBlock(scope: !108, file: !5, line: 21, column: 27)
!114 = !DILocation(line: 22, column: 7, scope: !113)
!115 = !DILocation(line: 22, column: 8, scope: !113)
!116 = !DILocation(line: 22, column: 5, scope: !113)
!117 = !DILocation(line: 22, column: 12, scope: !113)
!118 = !DILocation(line: 23, column: 3, scope: !113)
!119 = !DILocation(line: 21, column: 23, scope: !108)
!120 = !DILocation(line: 21, column: 3, scope: !108)
!121 = !DILocation(line: 24, column: 1, scope: !11)
!122 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pont", scope: !12, file: !5, line: 27, type: !123)
!123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1376, align: 32, elements: !124)
!124 = !{!125}
!125 = !DISubrange(count: 43)
!126 = !DILocation(line: 27, column: 7, scope: !12)
!127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !12, file: !5, line: 27, type: !8)
!128 = !DILocation(line: 27, column: 16, scope: !12)
!129 = !DILocation(line: 28, column: 9, scope: !130)
!130 = distinct !DILexicalBlock(scope: !12, file: !5, line: 28, column: 3)
!131 = !DILocation(line: 28, column: 7, scope: !130)
!132 = !DILocation(line: 28, column: 14, scope: !133)
!133 = !DILexicalBlockFile(scope: !134, file: !5, discriminator: 2)
!134 = !DILexicalBlockFile(scope: !135, file: !5, discriminator: 1)
!135 = distinct !DILexicalBlock(scope: !130, file: !5, line: 28, column: 3)
!136 = !DILocation(line: 28, column: 16, scope: !135)
!137 = !DILocation(line: 28, column: 3, scope: !130)
!138 = !DILocation(line: 29, column: 10, scope: !135)
!139 = !DILocation(line: 29, column: 5, scope: !135)
!140 = !DILocation(line: 29, column: 13, scope: !135)
!141 = !DILocation(line: 28, column: 24, scope: !135)
!142 = !DILocation(line: 28, column: 3, scope: !135)
!143 = !DILocation(line: 30, column: 9, scope: !144)
!144 = distinct !DILexicalBlock(scope: !12, file: !5, line: 30, column: 3)
!145 = !DILocation(line: 30, column: 7, scope: !144)
!146 = !DILocation(line: 30, column: 14, scope: !147)
!147 = !DILexicalBlockFile(scope: !148, file: !5, discriminator: 2)
!148 = !DILexicalBlockFile(scope: !149, file: !5, discriminator: 1)
!149 = distinct !DILexicalBlock(scope: !144, file: !5, line: 30, column: 3)
!150 = !DILocation(line: 30, column: 16, scope: !149)
!151 = !DILocation(line: 30, column: 3, scope: !144)
!152 = !DILocation(line: 31, column: 10, scope: !149)
!153 = !DILocation(line: 31, column: 5, scope: !149)
!154 = !DILocation(line: 31, column: 13, scope: !149)
!155 = !DILocation(line: 30, column: 23, scope: !149)
!156 = !DILocation(line: 30, column: 3, scope: !149)
!157 = !DILocation(line: 32, column: 3, scope: !12)
