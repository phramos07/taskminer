//===------------------------ recoverPoointerMD.h -------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the Universidade Federal de Minas Gerais -
// UFMG Open Source License. See LICENSE.TXT for details.
//
// Copyright (C) 2015   Gleison Souza Diniz Mendon?a
//
//===----------------------------------------------------------------------===//
//
// RecoverPointerMD is a class created for generate C code using
// the ID encoding.
//
// The name of variables generated by pass stay in NAME string. The 
// programmer can change this name in writeExpressions.h
//
//===----------------------------------------------------------------------===//
#include "llvm/Analysis/RegionInfo.h"
#include "llvm/Analysis/AliasAnalysis.h"
#include "llvm/Analysis/ScalarEvolutionExpressions.h"
#include "llvm/Analysis/ScalarEvolution.h"
#include "llvm/Analysis/LoopInfo.h"
#include <llvm/Transforms/Utils/BasicBlockUtils.h>

#ifndef myutils                                                                  
#define myutils                                                                  
#include "recoverCode.h"                                                         
#include "../ScopeTree/ScopeTree.h"                                              
#endif 

using namespace lge;

namespace llvm {
  class ScalarEvolution;
  class AliasAnalysis;
  class SCEV;
  class DominatorTree;

  class DominanceFrontier;
  struct PostDominatorTree;
  class Value;
  class Region;
  class Instruction;
  class LoopInfo;
  class ArrayInference;

class RecoverPointerMD : public RecoverCode {

  protected:

  //===---------------------------------------------------------------------===
  //                              Data Structs
  //===---------------------------------------------------------------------===
  // Data structs to identify a instruction with the command with C/C++ sintaxy:

  //===---------------------------------------------------------------------===

  Value *getBasePtr(Value *V);

  Value *getPointerOperand(Instruction *Inst);

  std::string recoverNameOf(Value *V, std::string name, int *var,
                            const DataLayout* DT);
  
  std::string recoverBitcastOf(Value *V, std::string name, int *var,
                            const DataLayout* DT);

  std::string recoverLoadMD (Value *V, std::string name, int *var,
                            const DataLayout* DT);

  std::string recoverStoreMD (Value *V, std::string name, int *var,
                            const DataLayout* DT);

  bool hasGEPasOperand(Value *V);

  bool hasLOADasOperand(Value *V);

  bool hasGEPasOperand(Value *V, std::map<Value*, bool> & KV);

  bool hasLOADasOperand(Value *V, std::map<Value*, bool> & KV);

  bool hasSameTypes(Type *Ty1, Type *Ty2);

  Value *combineGEP(GetElementPtrInst *GEP);

  DIType *getDITypeElement(DIType *dity, int elem);

  std::string recoverGEPMD (Value *V, std::string name, int *var,
                            const DataLayout* DT);

   // Return the expression for PtrToInt instruction.
  std::string getPtrToIntExpMD (PtrToIntInst *I, std::string name, int *var,
                       const DataLayout *DT);

  // Return the expression for IntToPtr instruction.
  std::string getIntToPtrExpMD (IntToPtrInst *I, std::string name, int *var,
                       const DataLayout *DT);

  // Return the name for used variable in instruction I.
  std::string getSextExpMD (SExtInst *I, std::string name, int *var,
                          const DataLayout *DT);

  // Return the name for used variable in instruction I.
  std::string getZextExpMD (ZExtInst *I, std::string name, int *var, 
                          const DataLayout *DT);

  public:

  RecoverPointerMD () {
    this->NewVars = 0;
    this->NAME = "LLVM";
    this->Valid = false;
    this->numPHIRec = 10;
    restric = true;
  }
  //===---------------------------------------------------------------------===  
  //                              Data Structs                                   
  //===---------------------------------------------------------------------===
  //===---------------------------------------------------------------------===

  bool isValidPointerMD (Value *V);

  std::string getAccessStringMD (Value *V, std::string name, int *var,
                            const DataLayout* DT);


  std::string recoverPointerMD (Value *V, std::string name, int *var,
                            const DataLayout* DT);

};

}

//===----------------------------- recoverCode.h --------------------------===//
