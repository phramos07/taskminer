TITLE
TaskMiner: Automatic Identification of Tasks

ABSTRACT
This paper presents TaskMiner, a tool that automatically finds task parallelism in C code. TaskMiner deals with classic problems of irregular parallelism, such as finding the memory ranges accessed by tasks, removal of of spurious static dependencies, detection of data-racing conditions and, most importantly, assessing the cost of parallelism for a given task or program. TaskMiner implements a suite of optimizations in LLVM's intermediate representation, which in the end insert OpenMP annotations to the code automatically, exposing task parallelism. TaskMiner finds parallelism that was previously manually appointed in benchmarks such as BSC-Bots, producing programs that are as fast or even faster than their sequential and manually annotated counterparts. TaskMiner also finds hidden parallelism in sequential programs, without human intervention.

ABSTRACT WITH LATEX CHARACTERS
This paper presents \Taskminer{}, a tool that automatically finds task parallelism in C code. \Taskminer{} deals with classic problems of irregular parallelism, such as finding the memory ranges accessed by tasks, removing spurious static dependencies, detecting data-racing conditions and, most importantly, assessing the cost of parallelism for a given task or program. \Taskminer{} implements a suite of optimizations in LLVM's intermediate representation, which in the end insert \textsf{OpenMP} annotations to the code automatically, exposing task parallelism. \Taskminer{} finds parallelism that was previously manually appointed in benchmarks such as \textsf{BSC-Bots}, producing programs that are as fast or even faster than their sequential and manually annotated counterparts. \Taskminer{} also finds hidden parallelism in sequential programs, without human intervention.