# OPENCL = opencl

# CC_OMP = clang-omp

# VARIABLES
ifndef OPENCL
	CLANG = /usr/local/bin/clang
	OPT = /usr/local/bin/opt
	TASKMINER = LLVMTaskMiner.dylib
	TASKMINER_FLAGS = -disable-output -taskminer -print-task-graph -stats -debug-only=print-tasks
endif

CFLAGS =  -I$(IDIR)
LLVM_FLAGS = -c -emit-llvm $(CFLAGS)
OMP_FLAGS = -fopenmp
OPT_FLAGS = -mem2reg -instnamer
IDIR = .

SERIAL_FILES = $(shell find $(SOURCEDIR) -name '*_SER.c')
AI_FILES = $(shell find $(SOURCEDIR) -name '*_AI.c')
MI_FILES = $(shell find $(SOURCEDIR) -name '*_MI.c')
ALLBCFILES = $(shell find $(SOURCEDIR) -name '*.mem.bc')

AI_SUFFIX = -par-AI
MI_SUFFIX = -par-MI
SER_SUFFIX = -ser

SER_OUT = $(shell find $(SOURCEDIR) -name '*$(SER_SUFFIX).out')
AI_OUT = $(shell find $(SOURCEDIR) -name '*$(AI_SUFFIX).out')
MI_OUT = $(shell find $(SOURCEDIR) -name '*$(MI_SUFFIX).out')

compile:
	$(MAKE) -i compile-serial
	$(MAKE) -i compile-parallel

run: compile

compile-serial:
	for SRC in $(SERIAL_FILES); do \
		$(CC_OMP) $(CFLAGS) $$SRC -o $$SRC$(SER_SUFFIX).out; \
	done

compile-parallel:
	for SRC in $(AI_FILES); do \
		$(CC_OMP) $(OMP_FLAGS) $(CFLAGS) $$SRC -o $$SRC$(AI_SUFFIX).out; \
	done
	for SRC in $(MI_FILES); do \
		$(CC_OMP) $(OMP_FLAGS) $(CFLAGS) $$SRC -o $$SRC$(MI_SUFFIX).out; \
	done

bc:
	$(MAKE) clean
	for SRC in $(SERIAL_FILES); do \
		$(CLANG) $(LLVM_FLAGS) $$SRC -o $$SRC.bc; \
		$(OPT) $(OPT_FLAGS) $$SRC.bc -o $$SRC.mem.bc; \
	done

taskminer: bc
	for SRC in $(ALLBCFILES); do \
		$(OPT) -load $(TASKMINER) $$SRC $(TASKMINER_FLAGS);  \
	done

annotator: bc
	for SRC in $(ALLBCFILES); do \
		# runanalyses.sh do gleison \
	done

run-parallel:
	@echo "\nRunning manually annotated:"
	@echo "\nSmall input:\n"
	time ./$(MI_OUT) $(SMALL_INPUT);
	@echo "\nMedium input:\n"
	time ./$(MI_OUT) $(MEDIUM_INPUT);
	@echo "\nBig input:\n"
	time ./$(MI_OUT) $(BIG_INPUT);

	@echo "\nRunning automatically annotated:"
	@echo "\nSmall input:\n"
	time ./$(AI_OUT) $(SMALL_INPUT);
	@echo "\nMedium input:\n"
	time ./$(AI_OUT) $(MEDIUM_INPUT);
	@echo "\nBig input:\n"
	time ./$(AI_OUT) $(BIG_INPUT);

run-serial:	
	@echo "\nRunning serial:"
	@echo "\nSmall input:\n"
	time ./$(SER_OUT) $(SMALL_INPUT);
	@echo "\nMedium input:\n"
	time ./$(SER_OUT) $(MEDIUM_INPUT);
	@echo "\nBig input:\n"
	time ./$(SER_OUT) $(BIG_INPUT);

clean:
	rm -f *.bc *.out *.dot