; ModuleID = 'toy3/toy3.c.bc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

@.str = private unnamed_addr constant [12 x i8] c"Finishing.\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  call void @llvm.dbg.value(metadata i32 10, i64 0, metadata !12, metadata !13), !dbg !14
  %tmp1 = zext i32 10 to i64, !dbg !15
  %tmp2 = call i8* @llvm.stacksave(), !dbg !15
  %vla = alloca i32, i64 %tmp1, align 16, !dbg !15
  call void @llvm.dbg.declare(metadata i32* %vla, metadata !16, metadata !20), !dbg !21
  %tmp4 = zext i32 10 to i64, !dbg !15
  %vla1 = alloca i32, i64 %tmp4, align 16, !dbg !15
  call void @llvm.dbg.declare(metadata i32* %vla1, metadata !22, metadata !20), !dbg !23
  %tmp6 = zext i32 10 to i64, !dbg !15
  %vla2 = alloca i32, i64 %tmp6, align 16, !dbg !15
  call void @llvm.dbg.declare(metadata i32* %vla2, metadata !24, metadata !20), !dbg !25
  %call = call i64 @time(i64* null), !dbg !26
  %conv = trunc i64 %call to i32, !dbg !26
  call void @srand(i32 %conv), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !28, metadata !13), !dbg !30
  br label %for.cond, !dbg !31

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 10, !dbg !32
  br i1 %cmp, label %for.body, label %for.end, !dbg !34

for.body:                                         ; preds = %for.cond
  %call4 = call i32 @rand(), !dbg !35
  %rem = srem i32 %call4, 10, !dbg !38
  %idxprom = sext i32 %i.0 to i64, !dbg !39
  %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom, !dbg !39
  store i32 %rem, i32* %arrayidx, align 4, !dbg !40
  %call5 = call i32 @rand(), !dbg !41
  %rem6 = srem i32 %call5, 10, !dbg !42
  %idxprom7 = sext i32 %i.0 to i64, !dbg !43
  %arrayidx8 = getelementptr inbounds i32, i32* %vla1, i64 %idxprom7, !dbg !43
  store i32 %rem6, i32* %arrayidx8, align 4, !dbg !44
  %call9 = call i32 @rand(), !dbg !45
  %rem10 = srem i32 %call9, 10, !dbg !46
  %idxprom11 = sext i32 %i.0 to i64, !dbg !47
  %arrayidx12 = getelementptr inbounds i32, i32* %vla2, i64 %idxprom11, !dbg !47
  store i32 %rem10, i32* %arrayidx12, align 4, !dbg !48
  call void @llvm.dbg.declare(metadata !2, metadata !49, metadata !13), !dbg !50
  call void @llvm.dbg.declare(metadata !2, metadata !51, metadata !13), !dbg !52
  call void @llvm.dbg.declare(metadata !2, metadata !53, metadata !13), !dbg !54
  br label %for.inc, !dbg !55

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !56
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !28, metadata !13), !dbg !30
  br label %for.cond, !dbg !57

for.end:                                          ; preds = %for.cond
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)), !dbg !58
  call void @llvm.stackrestore(i8* %tmp2), !dbg !59
  ret i32 0, !dbg !59
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare void @srand(i32) #3

declare i64 @time(i64*) #3

declare i32 @rand() #3

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!8, !9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final 268275)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "toy3/toy3.c", directory: "/Users/pedroramos/programs/llvm/lib/Transforms/TaskMiner/tests")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "main", scope: !1, file: !1, line: 37, type: !5, isLocal: false, isDefinition: true, scopeLine: 37, isOptimized: false, function: i32 ()* @main, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!8 = !{i32 2, !"Dwarf Version", i32 2}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"PIC Level", i32 2}
!11 = !{!"clang version 3.7.0 (tags/RELEASE_370/final 268275)"}
!12 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "N", scope: !4, file: !1, line: 38, type: !7)
!13 = !DIExpression()
!14 = !DILocation(line: 38, column: 6, scope: !4)
!15 = !DILocation(line: 39, column: 2, scope: !4)
!16 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "u", scope: !4, file: !1, line: 39, type: !17)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, align: 32, elements: !18)
!18 = !{!19}
!19 = !DISubrange(count: -1)
!20 = !DIExpression(DW_OP_deref)
!21 = !DILocation(line: 39, column: 6, scope: !4)
!22 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !4, file: !1, line: 39, type: !17)
!23 = !DILocation(line: 39, column: 12, scope: !4)
!24 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "w", scope: !4, file: !1, line: 39, type: !17)
!25 = !DILocation(line: 39, column: 18, scope: !4)
!26 = !DILocation(line: 46, column: 8, scope: !4)
!27 = !DILocation(line: 46, column: 2, scope: !4)
!28 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !29, file: !1, line: 47, type: !7)
!29 = distinct !DILexicalBlock(scope: !4, file: !1, line: 47, column: 2)
!30 = !DILocation(line: 47, column: 10, scope: !29)
!31 = !DILocation(line: 47, column: 6, scope: !29)
!32 = !DILocation(line: 47, column: 15, scope: !33)
!33 = distinct !DILexicalBlock(scope: !29, file: !1, line: 47, column: 2)
!34 = !DILocation(line: 47, column: 2, scope: !29)
!35 = !DILocation(line: 53, column: 11, scope: !36)
!36 = distinct !DILexicalBlock(scope: !37, file: !1, line: 50, column: 3)
!37 = distinct !DILexicalBlock(scope: !33, file: !1, line: 48, column: 2)
!38 = !DILocation(line: 53, column: 18, scope: !36)
!39 = !DILocation(line: 53, column: 4, scope: !36)
!40 = !DILocation(line: 53, column: 9, scope: !36)
!41 = !DILocation(line: 55, column: 11, scope: !36)
!42 = !DILocation(line: 55, column: 18, scope: !36)
!43 = !DILocation(line: 55, column: 4, scope: !36)
!44 = !DILocation(line: 55, column: 9, scope: !36)
!45 = !DILocation(line: 56, column: 11, scope: !36)
!46 = !DILocation(line: 56, column: 18, scope: !36)
!47 = !DILocation(line: 56, column: 4, scope: !36)
!48 = !DILocation(line: 56, column: 9, scope: !36)
!49 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !36, file: !1, line: 58, type: !7)
!50 = !DILocation(line: 58, column: 8, scope: !36)
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !36, file: !1, line: 58, type: !7)
!52 = !DILocation(line: 58, column: 11, scope: !36)
!53 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !36, file: !1, line: 58, type: !7)
!54 = !DILocation(line: 58, column: 14, scope: !36)
!55 = !DILocation(line: 68, column: 2, scope: !37)
!56 = !DILocation(line: 47, column: 19, scope: !33)
!57 = !DILocation(line: 47, column: 2, scope: !33)
!58 = !DILocation(line: 70, column: 2, scope: !4)
!59 = !DILocation(line: 72, column: 1, scope: !4)
