; ModuleID = 'toy2/toy2.c.bc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

@.str = private unnamed_addr constant [19 x i8] c"[one_read] a = %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Finished. %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define void @one_read(i32* %a) #0 {
entry:
  call void @llvm.dbg.value(metadata i32* %a, i64 0, metadata !16, metadata !17), !dbg !18
  store i32 100, i32* %a, align 4, !dbg !19
  %tmp2 = load i32, i32* %a, align 4, !dbg !20
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i32 %tmp2), !dbg !21
  ret void, !dbg !22
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %u = alloca [100000 x i32], align 16
  call void @llvm.dbg.value(metadata i32 100000, i64 0, metadata !23, metadata !17), !dbg !25
  call void @llvm.dbg.declare(metadata [100000 x i32]* %u, metadata !26, metadata !17), !dbg !30
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !31, metadata !17), !dbg !34
  br label %for.cond, !dbg !35

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000, !dbg !36
  br i1 %cmp, label %for.body, label %for.end, !dbg !38

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !39
  %arrayidx = getelementptr inbounds [100000 x i32], [100000 x i32]* %u, i32 0, i64 %idxprom, !dbg !39
  call void @llvm.dbg.value(metadata i32* %arrayidx, i64 0, metadata !16, metadata !17) #3, !dbg !41
  store i32 100, i32* %arrayidx, align 4, !dbg !43
  %tmp2.i = load i32, i32* %arrayidx, align 4, !dbg !44
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i32 %tmp2.i) #3, !dbg !45
  br label %for.inc, !dbg !46

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !47
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !31, metadata !17), !dbg !34
  br label %for.cond, !dbg !48

for.end:                                          ; preds = %for.cond
  %call = call i32 @rand(), !dbg !49
  %rem = srem i32 %call, 100000, !dbg !50
  %idxprom1 = sext i32 %rem to i64, !dbg !51
  %arrayidx2 = getelementptr inbounds [100000 x i32], [100000 x i32]* %u, i32 0, i64 %idxprom1, !dbg !51
  %tmp3 = load i32, i32* %arrayidx2, align 4, !dbg !51
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %tmp3), !dbg !52
  ret i32 0, !dbg !53
}

declare i32 @rand() #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!12, !13, !14}
!llvm.ident = !{!15}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final 268275)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "toy2/toy2.c", directory: "/Users/pedroramos/programs/llvm/lib/Transforms/TaskMiner/tests")
!2 = !{}
!3 = !{!4, !9}
!4 = !DISubprogram(name: "one_read", scope: !1, file: !1, line: 21, type: !5, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*)* @one_read, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DISubprogram(name: "main", scope: !1, file: !1, line: 26, type: !10, isLocal: false, isDefinition: true, scopeLine: 26, isOptimized: false, function: i32 ()* @main, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!8}
!12 = !{i32 2, !"Dwarf Version", i32 2}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"PIC Level", i32 2}
!15 = !{!"clang version 3.7.0 (tags/RELEASE_370/final 268275)"}
!16 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 21, type: !7)
!17 = !DIExpression()
!18 = !DILocation(line: 21, column: 20, scope: !4)
!19 = !DILocation(line: 22, column: 5, scope: !4)
!20 = !DILocation(line: 23, column: 32, scope: !4)
!21 = !DILocation(line: 23, column: 2, scope: !4)
!22 = !DILocation(line: 24, column: 1, scope: !4)
!23 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "N", scope: !9, file: !1, line: 27, type: !24)
!24 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!25 = !DILocation(line: 27, column: 12, scope: !9)
!26 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "u", scope: !9, file: !1, line: 28, type: !27)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 3200000, align: 32, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 100000)
!30 = !DILocation(line: 28, column: 6, scope: !9)
!31 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !32, file: !1, line: 33, type: !8)
!32 = distinct !DILexicalBlock(scope: !33, file: !1, line: 33, column: 3)
!33 = distinct !DILexicalBlock(scope: !9, file: !1, line: 32, column: 2)
!34 = !DILocation(line: 33, column: 11, scope: !32)
!35 = !DILocation(line: 33, column: 7, scope: !32)
!36 = !DILocation(line: 33, column: 17, scope: !37)
!37 = distinct !DILexicalBlock(scope: !32, file: !1, line: 33, column: 3)
!38 = !DILocation(line: 33, column: 3, scope: !32)
!39 = !DILocation(line: 36, column: 14, scope: !40)
!40 = distinct !DILexicalBlock(scope: !37, file: !1, line: 34, column: 3)
!41 = !DILocation(line: 21, column: 20, scope: !4, inlinedAt: !42)
!42 = distinct !DILocation(line: 36, column: 4, scope: !40)
!43 = !DILocation(line: 22, column: 5, scope: !4, inlinedAt: !42)
!44 = !DILocation(line: 23, column: 32, scope: !4, inlinedAt: !42)
!45 = !DILocation(line: 23, column: 2, scope: !4, inlinedAt: !42)
!46 = !DILocation(line: 37, column: 3, scope: !40)
!47 = !DILocation(line: 33, column: 22, scope: !37)
!48 = !DILocation(line: 33, column: 3, scope: !37)
!49 = !DILocation(line: 40, column: 29, scope: !9)
!50 = !DILocation(line: 40, column: 36, scope: !9)
!51 = !DILocation(line: 40, column: 27, scope: !9)
!52 = !DILocation(line: 40, column: 2, scope: !9)
!53 = !DILocation(line: 41, column: 2, scope: !9)
