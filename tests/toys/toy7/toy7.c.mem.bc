; ModuleID = 'toy7/toy7.c.bc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !21, metadata !22), !dbg !23
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !24, metadata !22), !dbg !25
  %call = call i8* @malloc(i64 80), !dbg !26
  %tmp = bitcast i8* %call to i32*, !dbg !27
  call void @llvm.dbg.value(metadata i32* %tmp, i64 0, metadata !28, metadata !22), !dbg !29
  %call1 = call i32* @bench(i32* %tmp, i32 %argc), !dbg !30
  %tmp3 = ptrtoint i32* %call1 to i32, !dbg !30
  call void @llvm.dbg.value(metadata i32 %tmp3, i64 0, metadata !31, metadata !22), !dbg !32
  ret i32 %tmp3, !dbg !33
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @malloc(i64) #2

; Function Attrs: nounwind ssp uwtable
define i32* @bench(i32* %v, i32 %N) #0 {
entry:
  call void @llvm.dbg.value(metadata i32* %v, i64 0, metadata !34, metadata !22), !dbg !35
  call void @llvm.dbg.value(metadata i32 %N, i64 0, metadata !36, metadata !22), !dbg !37
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !38, metadata !22), !dbg !39
  %sub = sub nsw i32 %N, 1, !dbg !40
  call void @llvm.dbg.value(metadata i32 %sub, i64 0, metadata !41, metadata !22), !dbg !42
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !43, metadata !22), !dbg !44
  %sub1 = sub nsw i32 %N, 1, !dbg !45
  call void @llvm.dbg.value(metadata i32 %sub1, i64 0, metadata !46, metadata !22), !dbg !47
  br label %while.cond, !dbg !48

while.cond:                                       ; preds = %while.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %while.body ]
  %cmp = icmp slt i32 %i.0, %sub1, !dbg !49
  br i1 %cmp, label %while.body, label %while.end, !dbg !48

while.body:                                       ; preds = %while.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32, i32* %v, i64 %idxprom, !dbg !50
  store i32 0, i32* %arrayidx, align 4, !dbg !52
  %idxprom2 = sext i32 %sub1 to i64, !dbg !53
  %arrayidx3 = getelementptr inbounds i32, i32* %v, i64 %idxprom2, !dbg !53
  %tmp8 = load i32, i32* %arrayidx3, align 4, !dbg !53
  %idxprom4 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx5 = getelementptr inbounds i32, i32* %v, i64 %idxprom4, !dbg !54
  store i32 %tmp8, i32* %arrayidx5, align 4, !dbg !55
  %inc = add nsw i32 %i.0, 1, !dbg !56
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !38, metadata !22), !dbg !39
  br label %while.cond, !dbg !48

while.end:                                        ; preds = %while.cond
  ret i32* %v, !dbg !57
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!17, !18, !19}
!llvm.ident = !{!20}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final 268275)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6)
!1 = !DIFile(filename: "toy7/toy7.c", directory: "/Users/pedroramos/programs/llvm/lib/Transforms/TaskMiner/tests")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!6 = !{!7, !14}
!7 = !DISubprogram(name: "main", scope: !1, file: !1, line: 5, type: !8, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!5, !5, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!13 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!14 = !DISubprogram(name: "bench", scope: !1, file: !1, line: 14, type: !15, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, function: i32* (i32*, i32)* @bench, variables: !2)
!15 = !DISubroutineType(types: !16)
!16 = !{!4, !4, !5}
!17 = !{i32 2, !"Dwarf Version", i32 2}
!18 = !{i32 2, !"Debug Info Version", i32 3}
!19 = !{i32 1, !"PIC Level", i32 2}
!20 = !{!"clang version 3.7.0 (tags/RELEASE_370/final 268275)"}
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !7, file: !1, line: 5, type: !5)
!22 = !DIExpression()
!23 = !DILocation(line: 5, column: 14, scope: !7)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !7, file: !1, line: 5, type: !10)
!25 = !DILocation(line: 5, column: 32, scope: !7)
!26 = !DILocation(line: 7, column: 21, scope: !7)
!27 = !DILocation(line: 7, column: 15, scope: !7)
!28 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "array", scope: !7, file: !1, line: 7, type: !4)
!29 = !DILocation(line: 7, column: 7, scope: !7)
!30 = !DILocation(line: 8, column: 10, scope: !7)
!31 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !7, file: !1, line: 8, type: !5)
!32 = !DILocation(line: 8, column: 6, scope: !7)
!33 = !DILocation(line: 10, column: 2, scope: !7)
!34 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !14, file: !1, line: 14, type: !4)
!35 = !DILocation(line: 14, column: 18, scope: !14)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "N", arg: 2, scope: !14, file: !1, line: 14, type: !5)
!37 = !DILocation(line: 14, column: 25, scope: !14)
!38 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !14, file: !1, line: 16, type: !5)
!39 = !DILocation(line: 16, column: 7, scope: !14)
!40 = !DILocation(line: 17, column: 13, scope: !14)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !14, file: !1, line: 17, type: !5)
!42 = !DILocation(line: 17, column: 7, scope: !14)
!43 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "var2", scope: !14, file: !1, line: 18, type: !5)
!44 = !DILocation(line: 18, column: 7, scope: !14)
!45 = !DILocation(line: 20, column: 9, scope: !14)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !14, file: !1, line: 15, type: !5)
!47 = !DILocation(line: 15, column: 7, scope: !14)
!48 = !DILocation(line: 21, column: 3, scope: !14)
!49 = !DILocation(line: 21, column: 11, scope: !14)
!50 = !DILocation(line: 22, column: 5, scope: !51)
!51 = distinct !DILexicalBlock(scope: !14, file: !1, line: 21, column: 15)
!52 = !DILocation(line: 22, column: 10, scope: !51)
!53 = !DILocation(line: 23, column: 12, scope: !51)
!54 = !DILocation(line: 23, column: 5, scope: !51)
!55 = !DILocation(line: 23, column: 10, scope: !51)
!56 = !DILocation(line: 24, column: 6, scope: !51)
!57 = !DILocation(line: 26, column: 3, scope: !14)
