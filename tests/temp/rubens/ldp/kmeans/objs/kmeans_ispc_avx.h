//
// objs/kmeans_ispc_avx.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC_OBJS_KMEANS_ISPC_AVX_H
#define ISPC_OBJS_KMEANS_ISPC_AVX_H

#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_vector_Point__
#define __ISPC_STRUCT_vector_Point__
struct vector_Point {
    struct Point * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_vector_int__
#define __ISPC_STRUCT_vector_int__
struct vector_int {
    int32_t * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_Point__
#define __ISPC_STRUCT_Point__
struct Point {
    int32_t label;
    int32_t centroid;
    struct vector_int dist;
    struct vector_int coord;
};
#endif

#ifndef __ISPC_STRUCT_vector_double__
#define __ISPC_STRUCT_vector_double__
struct vector_double {
    double * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_vector_float__
#define __ISPC_STRUCT_vector_float__
struct vector_float {
    float * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_vector_int16__
#define __ISPC_STRUCT_vector_int16__
struct vector_int16 {
    int16_t * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_vector_int32__
#define __ISPC_STRUCT_vector_int32__
struct vector_int32 {
    int32_t * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_vector_int64__
#define __ISPC_STRUCT_vector_int64__
struct vector_int64 {
    int64_t * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif

#ifndef __ISPC_STRUCT_vector_int8__
#define __ISPC_STRUCT_vector_int8__
struct vector_int8 {
    int8_t * data;
    int32_t empty;
    int32_t length;
    int32_t allocated;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void kmeans_crev(const struct vector_Point &point, struct vector_Point &centroid);
    extern struct Point vector_Point_assign(struct vector_Point &v, const int32_t pos, const struct Point &value);
    extern struct Point vector_Point_at(struct vector_Point &v, const int32_t pos);
    extern void vector_Point_build(struct vector_Point &v, int32_t len);
    extern void vector_Point_pop_back(struct vector_Point &v);
    extern void vector_Point_push_back(struct vector_Point &v, const struct Point &e);
    extern double vector_double_assign(struct vector_double &v, const int32_t pos, const double &value);
    extern double vector_double_at(struct vector_double &v, const int32_t pos);
    extern void vector_double_build(struct vector_double &v, int32_t len);
    extern void vector_double_pop_back(struct vector_double &v);
    extern void vector_double_push_back(struct vector_double &v, const double &e);
    extern float vector_float_assign(struct vector_float &v, const int32_t pos, const float &value);
    extern float vector_float_at(struct vector_float &v, const int32_t pos);
    extern void vector_float_build(struct vector_float &v, int32_t len);
    extern void vector_float_pop_back(struct vector_float &v);
    extern void vector_float_push_back(struct vector_float &v, const float &e);
    extern int16_t vector_int16_assign(struct vector_int16 &v, const int32_t pos, const int16_t &value);
    extern int16_t vector_int16_at(struct vector_int16 &v, const int32_t pos);
    extern void vector_int16_build(struct vector_int16 &v, int32_t len);
    extern void vector_int16_pop_back(struct vector_int16 &v);
    extern void vector_int16_push_back(struct vector_int16 &v, const int16_t &e);
    extern int32_t vector_int32_assign(struct vector_int32 &v, const int32_t pos, const int32_t &value);
    extern int32_t vector_int32_at(struct vector_int32 &v, const int32_t pos);
    extern void vector_int32_build(struct vector_int32 &v, int32_t len);
    extern void vector_int32_pop_back(struct vector_int32 &v);
    extern void vector_int32_push_back(struct vector_int32 &v, const int32_t &e);
    extern int64_t vector_int64_assign(struct vector_int64 &v, const int32_t pos, const int64_t &value);
    extern int64_t vector_int64_at(struct vector_int64 &v, const int32_t pos);
    extern void vector_int64_build(struct vector_int64 &v, int32_t len);
    extern void vector_int64_pop_back(struct vector_int64 &v);
    extern void vector_int64_push_back(struct vector_int64 &v, const int64_t &e);
    extern int8_t vector_int8_assign(struct vector_int8 &v, const int32_t pos, const int8_t &value);
    extern int8_t vector_int8_at(struct vector_int8 &v, const int32_t pos);
    extern void vector_int8_build(struct vector_int8 &v, int32_t len);
    extern void vector_int8_pop_back(struct vector_int8 &v);
    extern void vector_int8_push_back(struct vector_int8 &v, const int8_t &e);
    extern int32_t vector_int_assign(struct vector_int &v, const int32_t pos, const int32_t &value);
    extern int32_t vector_int_at(struct vector_int &v, const int32_t pos);
    extern void vector_int_build(struct vector_int &v, int32_t len);
    extern void vector_int_pop_back(struct vector_int &v);
    extern void vector_int_push_back(struct vector_int &v, const int32_t &e);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus

#endif // ISPC_OBJS_KMEANS_ISPC_AVX_H
