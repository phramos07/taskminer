; ModuleID = 'bellmanford.c.bc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

@G = common global [100 x i32] zeroinitializer, align 16
@dist = common global [10 x i32] zeroinitializer, align 16
@prev = common global [10 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @min(i32 %a, i32 %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !44, metadata !45), !dbg !46
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !47, metadata !45), !dbg !48
  %cmp = icmp sgt i32 %a, %b, !dbg !49
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !50

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !50

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !50

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %b, %cond.true ], [ %a, %cond.false ], !dbg !50
  ret i32 %cond, !dbg !51
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !52, metadata !45), !dbg !53
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !54, metadata !45), !dbg !55
  call void @graph_bellmanFord(), !dbg !56
  ret i32 0, !dbg !57
}

; Function Attrs: nounwind ssp uwtable
define void @graph_bellmanFord() #0 {
entry:
  call void @fillgraph(i32* getelementptr inbounds ([100 x i32], [100 x i32]* @G, i32 0, i32 0), i32 10), !dbg !58
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !59, metadata !45), !dbg !62
  br label %for.cond, !dbg !63

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp ult i32 %i.0, 10, !dbg !64
  br i1 %cmp, label %for.body, label %for.end, !dbg !66

for.body:                                         ; preds = %for.cond
  %idxprom = zext i32 %i.0 to i64, !dbg !67
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* @dist, i32 0, i64 %idxprom, !dbg !67
  store i32 10000000, i32* %arrayidx, align 4, !dbg !69
  %idxprom1 = zext i32 %i.0 to i64, !dbg !70
  %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* @prev, i32 0, i64 %idxprom1, !dbg !70
  store i32 -1, i32* %arrayidx2, align 4, !dbg !71
  br label %for.inc, !dbg !72

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1, !dbg !73
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !59, metadata !45), !dbg !62
  br label %for.cond, !dbg !74

for.end:                                          ; preds = %for.cond
  store i32 0, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @dist, i32 0, i64 0), align 4, !dbg !75
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !76, metadata !45), !dbg !78
  br label %for.cond.4, !dbg !79

for.cond.4:                                       ; preds = %for.inc.19, %for.end
  %i3.0 = phi i32 [ 0, %for.end ], [ %inc20, %for.inc.19 ]
  %cmp5 = icmp ult i32 %i3.0, 9, !dbg !80
  br i1 %cmp5, label %for.body.6, label %for.end.21, !dbg !82

for.body.6:                                       ; preds = %for.cond.4
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !83, metadata !45), !dbg !85
  br label %for.cond.7, !dbg !86

for.cond.7:                                       ; preds = %for.inc.16, %for.body.6
  %j.0 = phi i32 [ 0, %for.body.6 ], [ %inc17, %for.inc.16 ]
  %cmp8 = icmp ult i32 %j.0, 10, !dbg !87
  br i1 %cmp8, label %for.body.9, label %for.end.18, !dbg !89

for.body.9:                                       ; preds = %for.cond.7
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !90, metadata !45), !dbg !92
  br label %for.cond.10, !dbg !93

for.cond.10:                                      ; preds = %for.inc.13, %for.body.9
  %k.0 = phi i32 [ 0, %for.body.9 ], [ %inc14, %for.inc.13 ]
  %cmp11 = icmp ult i32 %k.0, 10, !dbg !94
  br i1 %cmp11, label %for.body.12, label %for.end.15, !dbg !96

for.body.12:                                      ; preds = %for.cond.10
  call void @relax_edges(i32 %j.0, i32 %k.0), !dbg !97
  br label %for.inc.13, !dbg !99

for.inc.13:                                       ; preds = %for.body.12
  %inc14 = add i32 %k.0, 1, !dbg !100
  call void @llvm.dbg.value(metadata i32 %inc14, i64 0, metadata !90, metadata !45), !dbg !92
  br label %for.cond.10, !dbg !101

for.end.15:                                       ; preds = %for.cond.10
  br label %for.inc.16, !dbg !102

for.inc.16:                                       ; preds = %for.end.15
  %inc17 = add i32 %j.0, 1, !dbg !103
  call void @llvm.dbg.value(metadata i32 %inc17, i64 0, metadata !83, metadata !45), !dbg !85
  br label %for.cond.7, !dbg !104

for.end.18:                                       ; preds = %for.cond.7
  br label %for.inc.19, !dbg !105

for.inc.19:                                       ; preds = %for.end.18
  %inc20 = add i32 %i3.0, 1, !dbg !106
  call void @llvm.dbg.value(metadata i32 %inc20, i64 0, metadata !76, metadata !45), !dbg !78
  br label %for.cond.4, !dbg !107

for.end.21:                                       ; preds = %for.cond.4
  ret void, !dbg !108
}

; Function Attrs: nounwind ssp uwtable
define void @fillgraph(i32* %G, i32 %N) #0 {
entry:
  call void @llvm.dbg.value(metadata i32* %G, i64 0, metadata !109, metadata !45), !dbg !110
  call void @llvm.dbg.value(metadata i32 %N, i64 0, metadata !111, metadata !45), !dbg !112
  call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !113, metadata !45), !dbg !116
  br label %for.cond, !dbg !117

for.cond:                                         ; preds = %for.inc.9, %entry
  %i.0 = phi i64 [ 0, %entry ], [ %inc10, %for.inc.9 ]
  %conv = sext i32 %N to i64, !dbg !118
  %cmp = icmp ult i64 %i.0, %conv, !dbg !120
  br i1 %cmp, label %for.body, label %for.end.11, !dbg !121

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !122, metadata !45), !dbg !125
  br label %for.cond.2, !dbg !126

for.cond.2:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i64 [ 0, %for.body ], [ %inc, %for.inc ]
  %conv3 = sext i32 %N to i64, !dbg !127
  %cmp4 = icmp ult i64 %j.0, %conv3, !dbg !129
  br i1 %cmp4, label %for.body.6, label %for.end, !dbg !130

for.body.6:                                       ; preds = %for.cond.2
  %call = call i32 (...) @rand(), !dbg !131
  %rem = srem i32 %call, 5, !dbg !133
  %conv7 = sext i32 %N to i64, !dbg !134
  %mul = mul i64 %i.0, %conv7, !dbg !135
  %add.ptr = getelementptr inbounds i32, i32* %G, i64 %mul, !dbg !136
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr, i64 %j.0, !dbg !137
  store i32 %rem, i32* %add.ptr8, align 4, !dbg !138
  br label %for.inc, !dbg !139

for.inc:                                          ; preds = %for.body.6
  %inc = add i64 %j.0, 1, !dbg !140
  call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !122, metadata !45), !dbg !125
  br label %for.cond.2, !dbg !141

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.9, !dbg !142

for.inc.9:                                        ; preds = %for.end
  %inc10 = add i64 %i.0, 1, !dbg !143
  call void @llvm.dbg.value(metadata i64 %inc10, i64 0, metadata !113, metadata !45), !dbg !116
  br label %for.cond, !dbg !144

for.end.11:                                       ; preds = %for.cond
  ret void, !dbg !145
}

; Function Attrs: nounwind ssp uwtable
define void @relax_edges(i32 %src, i32 %dst) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %src, i64 0, metadata !146, metadata !45), !dbg !147
  call void @llvm.dbg.value(metadata i32 %dst, i64 0, metadata !148, metadata !45), !dbg !149
  %idxprom = sext i32 %dst to i64, !dbg !150
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* @dist, i32 0, i64 %idxprom, !dbg !150
  %tmp1 = load i32, i32* %arrayidx, align 4, !dbg !150
  %idxprom1 = sext i32 %src to i64, !dbg !151
  %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* @dist, i32 0, i64 %idxprom1, !dbg !151
  %tmp3 = load i32, i32* %arrayidx2, align 4, !dbg !151
  %mul = mul nsw i32 %src, 10, !dbg !152
  %add = add nsw i32 %mul, %dst, !dbg !153
  %idxprom3 = sext i32 %add to i64, !dbg !154
  %arrayidx4 = getelementptr inbounds [100 x i32], [100 x i32]* @G, i32 0, i64 %idxprom3, !dbg !154
  %tmp6 = load i32, i32* %arrayidx4, align 4, !dbg !154
  %add5 = add nsw i32 %tmp3, %tmp6, !dbg !155
  %call = call i32 @min(i32 %tmp1, i32 %add5), !dbg !156
  %idxprom6 = sext i32 %dst to i64, !dbg !157
  %arrayidx7 = getelementptr inbounds [10 x i32], [10 x i32]* @dist, i32 0, i64 %idxprom6, !dbg !157
  store i32 %call, i32* %arrayidx7, align 4, !dbg !158
  %call8 = call i32 (...) @rand(), !dbg !159
  %call9 = call i32 (...) @rand(), !dbg !160
  %sub = sub nsw i32 %call8, %call9, !dbg !161
  %conv = sitofp i32 %sub to double, !dbg !159
  %tmp8 = call double @llvm.pow.f64(double %conv, double 2.000000e+00), !dbg !162
  %call10 = call i32 (...) @rand(), !dbg !163
  %call11 = call i32 (...) @rand(), !dbg !164
  %sub12 = sub nsw i32 %call10, %call11, !dbg !165
  %conv13 = sitofp i32 %sub12 to double, !dbg !163
  %tmp9 = call double @llvm.pow.f64(double %conv13, double 2.000000e+00), !dbg !166
  %add14 = fadd double %tmp8, %tmp9, !dbg !167
  %call15 = call double @sqrt(double %add14) #1, !dbg !168
  %conv16 = fptosi double %call15 to i32, !dbg !168
  call void @llvm.dbg.value(metadata i32 %conv16, i64 0, metadata !169, metadata !45), !dbg !170
  %idxprom17 = sext i32 %dst to i64, !dbg !171
  %arrayidx18 = getelementptr inbounds [10 x i32], [10 x i32]* @dist, i32 0, i64 %idxprom17, !dbg !171
  store i32 %conv16, i32* %arrayidx18, align 4, !dbg !172
  ret void, !dbg !173
}

; Function Attrs: nounwind readnone
declare double @sqrt(double) #2

declare i32 @rand(...) #3

; Function Attrs: nounwind readnone
declare double @llvm.pow.f64(double, double) #1

; Function Attrs: nounwind ssp uwtable
define void @printGraph(i32* %G, i32 %N) #0 {
entry:
  call void @llvm.dbg.value(metadata i32* %G, i64 0, metadata !174, metadata !45), !dbg !175
  call void @llvm.dbg.value(metadata i32 %N, i64 0, metadata !176, metadata !45), !dbg !177
  call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !178, metadata !45), !dbg !180
  br label %for.cond, !dbg !181

for.cond:                                         ; preds = %for.inc.10, %entry
  %i.0 = phi i64 [ 0, %entry ], [ %inc11, %for.inc.10 ]
  %conv = sext i32 %N to i64, !dbg !182
  %cmp = icmp ult i64 %i.0, %conv, !dbg !184
  br i1 %cmp, label %for.body, label %for.end.12, !dbg !185

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !186, metadata !45), !dbg !189
  br label %for.cond.2, !dbg !190

for.cond.2:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i64 [ 0, %for.body ], [ %inc, %for.inc ]
  %conv3 = sext i32 %N to i64, !dbg !191
  %cmp4 = icmp ult i64 %j.0, %conv3, !dbg !193
  br i1 %cmp4, label %for.body.6, label %for.end, !dbg !194

for.body.6:                                       ; preds = %for.cond.2
  %conv7 = sext i32 %N to i64, !dbg !195
  %mul = mul i64 %i.0, %conv7, !dbg !197
  %add.ptr = getelementptr inbounds i32, i32* %G, i64 %mul, !dbg !198
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr, i64 %j.0, !dbg !199
  %tmp8 = load i32, i32* %add.ptr8, align 4, !dbg !200
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %tmp8), !dbg !201
  br label %for.inc, !dbg !202

for.inc:                                          ; preds = %for.body.6
  %inc = add i64 %j.0, 1, !dbg !203
  call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !186, metadata !45), !dbg !189
  br label %for.cond.2, !dbg !204

for.end:                                          ; preds = %for.cond.2
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0)), !dbg !205
  br label %for.inc.10, !dbg !206

for.inc.10:                                       ; preds = %for.end
  %inc11 = add i64 %i.0, 1, !dbg !207
  call void @llvm.dbg.value(metadata i64 %inc11, i64 0, metadata !178, metadata !45), !dbg !180
  br label %for.cond, !dbg !208

for.end.12:                                       ; preds = %for.cond
  ret void, !dbg !209
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!40, !41, !42}
!llvm.ident = !{!43}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final 268275)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !26)
!1 = !DIFile(filename: "bellmanford.c", directory: "/Users/pedroramos/programs/llvm/lib/Transforms/taskminer/tests/overview/bellmanford")
!2 = !{}
!3 = !{!4, !8, !15, !18, !21, !25}
!4 = !DISubprogram(name: "min", scope: !1, file: !1, line: 19, type: !5, isLocal: false, isDefinition: true, scopeLine: 19, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i32)* @min, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !7, !7}
!7 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!8 = !DISubprogram(name: "main", scope: !1, file: !1, line: 23, type: !9, isLocal: false, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!9 = !DISubroutineType(types: !10)
!10 = !{!7, !7, !11}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!13 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !14)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !DISubprogram(name: "graph_bellmanFord", scope: !1, file: !1, line: 30, type: !16, isLocal: false, isDefinition: true, scopeLine: 31, isOptimized: false, function: void ()* @graph_bellmanFord, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{null}
!18 = !DISubprogram(name: "relax_edges", scope: !1, file: !1, line: 68, type: !19, isLocal: false, isDefinition: true, scopeLine: 69, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32)* @relax_edges, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{null, !7, !7}
!21 = !DISubprogram(name: "fillgraph", scope: !1, file: !1, line: 75, type: !22, isLocal: false, isDefinition: true, scopeLine: 76, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32)* @fillgraph, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{null, !24, !7}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!25 = !DISubprogram(name: "printGraph", scope: !1, file: !1, line: 86, type: !22, isLocal: false, isDefinition: true, scopeLine: 87, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32)* @printGraph, variables: !2)
!26 = !{!27, !29, !30, !31, !35, !39}
!27 = !DIGlobalVariable(name: "SIZE", scope: !0, file: !1, line: 5, type: !28, isLocal: true, isDefinition: true, variable: i32 10)
!28 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!29 = !DIGlobalVariable(name: "INF", scope: !0, file: !1, line: 6, type: !28, isLocal: true, isDefinition: true, variable: i32 10000000)
!30 = !DIGlobalVariable(name: "NODE_START", scope: !0, file: !1, line: 7, type: !28, isLocal: true, isDefinition: true, variable: i32 0)
!31 = !DIGlobalVariable(name: "G", scope: !0, file: !1, line: 9, type: !32, isLocal: false, isDefinition: true, variable: [100 x i32]* @G)
!32 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 3200, align: 32, elements: !33)
!33 = !{!34}
!34 = !DISubrange(count: 100)
!35 = !DIGlobalVariable(name: "dist", scope: !0, file: !1, line: 10, type: !36, isLocal: false, isDefinition: true, variable: [10 x i32]* @dist)
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 320, align: 32, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 10)
!39 = !DIGlobalVariable(name: "prev", scope: !0, file: !1, line: 11, type: !36, isLocal: false, isDefinition: true, variable: [10 x i32]* @prev)
!40 = !{i32 2, !"Dwarf Version", i32 2}
!41 = !{i32 2, !"Debug Info Version", i32 3}
!42 = !{i32 1, !"PIC Level", i32 2}
!43 = !{!"clang version 3.7.0 (tags/RELEASE_370/final 268275)"}
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 19, type: !7)
!45 = !DIExpression()
!46 = !DILocation(line: 19, column: 13, scope: !4)
!47 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 19, type: !7)
!48 = !DILocation(line: 19, column: 20, scope: !4)
!49 = !DILocation(line: 19, column: 33, scope: !4)
!50 = !DILocation(line: 19, column: 31, scope: !4)
!51 = !DILocation(line: 19, column: 24, scope: !4)
!52 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !8, file: !1, line: 23, type: !7)
!53 = !DILocation(line: 23, column: 14, scope: !8)
!54 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !8, file: !1, line: 23, type: !11)
!55 = !DILocation(line: 23, column: 32, scope: !8)
!56 = !DILocation(line: 25, column: 2, scope: !8)
!57 = !DILocation(line: 27, column: 2, scope: !8)
!58 = !DILocation(line: 35, column: 2, scope: !15)
!59 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !60, file: !1, line: 45, type: !61)
!60 = distinct !DILexicalBlock(scope: !15, file: !1, line: 45, column: 2)
!61 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!62 = !DILocation(line: 45, column: 16, scope: !60)
!63 = !DILocation(line: 45, column: 7, scope: !60)
!64 = !DILocation(line: 45, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !60, file: !1, line: 45, column: 2)
!66 = !DILocation(line: 45, column: 2, scope: !60)
!67 = !DILocation(line: 47, column: 3, scope: !68)
!68 = distinct !DILexicalBlock(scope: !65, file: !1, line: 46, column: 2)
!69 = !DILocation(line: 47, column: 11, scope: !68)
!70 = !DILocation(line: 48, column: 3, scope: !68)
!71 = !DILocation(line: 48, column: 11, scope: !68)
!72 = !DILocation(line: 49, column: 2, scope: !68)
!73 = !DILocation(line: 45, column: 34, scope: !65)
!74 = !DILocation(line: 45, column: 2, scope: !65)
!75 = !DILocation(line: 52, column: 19, scope: !15)
!76 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !77, file: !1, line: 57, type: !61)
!77 = distinct !DILexicalBlock(scope: !15, file: !1, line: 57, column: 2)
!78 = !DILocation(line: 57, column: 16, scope: !77)
!79 = !DILocation(line: 57, column: 7, scope: !77)
!80 = !DILocation(line: 57, column: 25, scope: !81)
!81 = distinct !DILexicalBlock(scope: !77, file: !1, line: 57, column: 2)
!82 = !DILocation(line: 57, column: 2, scope: !77)
!83 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !84, file: !1, line: 58, type: !61)
!84 = distinct !DILexicalBlock(scope: !81, file: !1, line: 58, column: 3)
!85 = !DILocation(line: 58, column: 17, scope: !84)
!86 = !DILocation(line: 58, column: 8, scope: !84)
!87 = !DILocation(line: 58, column: 26, scope: !88)
!88 = distinct !DILexicalBlock(scope: !84, file: !1, line: 58, column: 3)
!89 = !DILocation(line: 58, column: 3, scope: !84)
!90 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !91, file: !1, line: 59, type: !61)
!91 = distinct !DILexicalBlock(scope: !88, file: !1, line: 59, column: 4)
!92 = !DILocation(line: 59, column: 18, scope: !91)
!93 = !DILocation(line: 59, column: 9, scope: !91)
!94 = !DILocation(line: 59, column: 27, scope: !95)
!95 = distinct !DILexicalBlock(scope: !91, file: !1, line: 59, column: 4)
!96 = !DILocation(line: 59, column: 4, scope: !91)
!97 = !DILocation(line: 61, column: 5, scope: !98)
!98 = distinct !DILexicalBlock(scope: !95, file: !1, line: 60, column: 4)
!99 = !DILocation(line: 62, column: 4, scope: !98)
!100 = !DILocation(line: 59, column: 36, scope: !95)
!101 = !DILocation(line: 59, column: 4, scope: !95)
!102 = !DILocation(line: 62, column: 4, scope: !91)
!103 = !DILocation(line: 58, column: 35, scope: !88)
!104 = !DILocation(line: 58, column: 3, scope: !88)
!105 = !DILocation(line: 62, column: 4, scope: !84)
!106 = !DILocation(line: 57, column: 38, scope: !81)
!107 = !DILocation(line: 57, column: 2, scope: !81)
!108 = !DILocation(line: 64, column: 1, scope: !15)
!109 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "G", arg: 1, scope: !21, file: !1, line: 75, type: !24)
!110 = !DILocation(line: 75, column: 21, scope: !21)
!111 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "N", arg: 2, scope: !21, file: !1, line: 75, type: !7)
!112 = !DILocation(line: 75, column: 28, scope: !21)
!113 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !114, file: !1, line: 77, type: !115)
!114 = distinct !DILexicalBlock(scope: !21, file: !1, line: 77, column: 2)
!115 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!116 = !DILocation(line: 77, column: 21, scope: !114)
!117 = !DILocation(line: 77, column: 7, scope: !114)
!118 = !DILocation(line: 77, column: 32, scope: !119)
!119 = distinct !DILexicalBlock(scope: !114, file: !1, line: 77, column: 2)
!120 = !DILocation(line: 77, column: 30, scope: !119)
!121 = !DILocation(line: 77, column: 2, scope: !114)
!122 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !123, file: !1, line: 79, type: !115)
!123 = distinct !DILexicalBlock(scope: !124, file: !1, line: 79, column: 3)
!124 = distinct !DILexicalBlock(scope: !119, file: !1, line: 78, column: 2)
!125 = !DILocation(line: 79, column: 22, scope: !123)
!126 = !DILocation(line: 79, column: 8, scope: !123)
!127 = !DILocation(line: 79, column: 33, scope: !128)
!128 = distinct !DILexicalBlock(scope: !123, file: !1, line: 79, column: 3)
!129 = !DILocation(line: 79, column: 31, scope: !128)
!130 = !DILocation(line: 79, column: 3, scope: !123)
!131 = !DILocation(line: 81, column: 21, scope: !132)
!132 = distinct !DILexicalBlock(scope: !128, file: !1, line: 80, column: 3)
!133 = !DILocation(line: 81, column: 27, scope: !132)
!134 = !DILocation(line: 81, column: 12, scope: !132)
!135 = !DILocation(line: 81, column: 11, scope: !132)
!136 = !DILocation(line: 81, column: 8, scope: !132)
!137 = !DILocation(line: 81, column: 14, scope: !132)
!138 = !DILocation(line: 81, column: 19, scope: !132)
!139 = !DILocation(line: 82, column: 3, scope: !132)
!140 = !DILocation(line: 79, column: 37, scope: !128)
!141 = !DILocation(line: 79, column: 3, scope: !128)
!142 = !DILocation(line: 83, column: 2, scope: !124)
!143 = !DILocation(line: 77, column: 36, scope: !119)
!144 = !DILocation(line: 77, column: 2, scope: !119)
!145 = !DILocation(line: 84, column: 1, scope: !21)
!146 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "src", arg: 1, scope: !18, file: !1, line: 68, type: !7)
!147 = !DILocation(line: 68, column: 22, scope: !18)
!148 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dst", arg: 2, scope: !18, file: !1, line: 68, type: !7)
!149 = !DILocation(line: 68, column: 31, scope: !18)
!150 = !DILocation(line: 70, column: 18, scope: !18)
!151 = !DILocation(line: 70, column: 30, scope: !18)
!152 = !DILocation(line: 70, column: 47, scope: !18)
!153 = !DILocation(line: 70, column: 53, scope: !18)
!154 = !DILocation(line: 70, column: 42, scope: !18)
!155 = !DILocation(line: 70, column: 40, scope: !18)
!156 = !DILocation(line: 70, column: 14, scope: !18)
!157 = !DILocation(line: 70, column: 2, scope: !18)
!158 = !DILocation(line: 70, column: 12, scope: !18)
!159 = !DILocation(line: 71, column: 23, scope: !18)
!160 = !DILocation(line: 71, column: 32, scope: !18)
!161 = !DILocation(line: 71, column: 30, scope: !18)
!162 = !DILocation(line: 71, column: 19, scope: !18)
!163 = !DILocation(line: 71, column: 49, scope: !18)
!164 = !DILocation(line: 71, column: 58, scope: !18)
!165 = !DILocation(line: 71, column: 56, scope: !18)
!166 = !DILocation(line: 71, column: 45, scope: !18)
!167 = !DILocation(line: 71, column: 43, scope: !18)
!168 = !DILocation(line: 71, column: 14, scope: !18)
!169 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dist_", scope: !18, file: !1, line: 71, type: !7)
!170 = !DILocation(line: 71, column: 6, scope: !18)
!171 = !DILocation(line: 72, column: 2, scope: !18)
!172 = !DILocation(line: 72, column: 12, scope: !18)
!173 = !DILocation(line: 73, column: 1, scope: !18)
!174 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "G", arg: 1, scope: !25, file: !1, line: 86, type: !24)
!175 = !DILocation(line: 86, column: 22, scope: !25)
!176 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "N", arg: 2, scope: !25, file: !1, line: 86, type: !7)
!177 = !DILocation(line: 86, column: 29, scope: !25)
!178 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !179, file: !1, line: 88, type: !115)
!179 = distinct !DILexicalBlock(scope: !25, file: !1, line: 88, column: 2)
!180 = !DILocation(line: 88, column: 21, scope: !179)
!181 = !DILocation(line: 88, column: 7, scope: !179)
!182 = !DILocation(line: 88, column: 32, scope: !183)
!183 = distinct !DILexicalBlock(scope: !179, file: !1, line: 88, column: 2)
!184 = !DILocation(line: 88, column: 30, scope: !183)
!185 = !DILocation(line: 88, column: 2, scope: !179)
!186 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !187, file: !1, line: 90, type: !115)
!187 = distinct !DILexicalBlock(scope: !188, file: !1, line: 90, column: 3)
!188 = distinct !DILexicalBlock(scope: !183, file: !1, line: 89, column: 2)
!189 = !DILocation(line: 90, column: 22, scope: !187)
!190 = !DILocation(line: 90, column: 8, scope: !187)
!191 = !DILocation(line: 90, column: 33, scope: !192)
!192 = distinct !DILexicalBlock(scope: !187, file: !1, line: 90, column: 3)
!193 = !DILocation(line: 90, column: 31, scope: !192)
!194 = !DILocation(line: 90, column: 3, scope: !187)
!195 = !DILocation(line: 92, column: 27, scope: !196)
!196 = distinct !DILexicalBlock(scope: !192, file: !1, line: 91, column: 3)
!197 = !DILocation(line: 92, column: 26, scope: !196)
!198 = !DILocation(line: 92, column: 23, scope: !196)
!199 = !DILocation(line: 92, column: 29, scope: !196)
!200 = !DILocation(line: 92, column: 19, scope: !196)
!201 = !DILocation(line: 92, column: 4, scope: !196)
!202 = !DILocation(line: 93, column: 3, scope: !196)
!203 = !DILocation(line: 90, column: 37, scope: !192)
!204 = !DILocation(line: 90, column: 3, scope: !192)
!205 = !DILocation(line: 94, column: 3, scope: !188)
!206 = !DILocation(line: 95, column: 2, scope: !188)
!207 = !DILocation(line: 88, column: 36, scope: !183)
!208 = !DILocation(line: 88, column: 2, scope: !183)
!209 = !DILocation(line: 96, column: 1, scope: !25)
