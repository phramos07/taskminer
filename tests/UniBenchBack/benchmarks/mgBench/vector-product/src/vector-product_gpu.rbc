; ModuleID = '/home/gleison/lge/dawn-3.7/UniBench/benchmarks//mgBench/vector-product/src/vector-product_gpu.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timezone = type { i32, i32 }
%struct.timeval = type { i64, i64 }

@.str = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
@.str.1 = private unnamed_addr constant [74 x i8] c"Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\0A\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [22 x i8] c"<< Vector Product >>\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"GPU Runtime: %0.6lfs\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"CPU Runtime: %0.6lfs\0A\00", align 1

; Function Attrs: nounwind uwtable
define double @rtclock() #0 {
entry:
  %Tzp = alloca %struct.timezone, align 4
  %Tp = alloca %struct.timeval, align 8
  call void @llvm.dbg.declare(metadata %struct.timezone* %Tzp, metadata !36, metadata !42), !dbg !43
  call void @llvm.dbg.declare(metadata %struct.timeval* %Tp, metadata !44, metadata !42), !dbg !54
  %call = call i32 @gettimeofday(%struct.timeval* %Tp, %struct.timezone* %Tzp) #4, !dbg !55
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !56, metadata !42), !dbg !57
  %cmp = icmp ne i32 %call, 0, !dbg !58
  br i1 %cmp, label %if.then, label %if.end, !dbg !60

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i32 %call), !dbg !61
  br label %if.end, !dbg !61

if.end:                                           ; preds = %if.then, %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %Tp, i32 0, i32 0, !dbg !62
  %tmp = load i64, i64* %tv_sec, align 8, !dbg !62
  %conv = sitofp i64 %tmp to double, !dbg !63
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %Tp, i32 0, i32 1, !dbg !64
  %tmp1 = load i64, i64* %tv_usec, align 8, !dbg !64
  %conv2 = sitofp i64 %tmp1 to double, !dbg !65
  %mul = fmul double %conv2, 1.000000e-06, !dbg !66
  %add = fadd double %conv, %mul, !dbg !67
  ret double %add, !dbg !68
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind uwtable
define float @absVal(float %a) #0 {
entry:
  call void @llvm.dbg.value(metadata float %a, i64 0, metadata !69, metadata !42), !dbg !70
  %cmp = fcmp olt float %a, 0.000000e+00, !dbg !71
  br i1 %cmp, label %if.then, label %if.else, !dbg !73

if.then:                                          ; preds = %entry
  %mul = fmul float %a, -1.000000e+00, !dbg !74
  br label %return, !dbg !76

if.else:                                          ; preds = %entry
  br label %return, !dbg !77

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi float [ %mul, %if.then ], [ %a, %if.else ]
  ret float %retval.0, !dbg !79
}

; Function Attrs: nounwind uwtable
define float @percentDiff(double %val1, double %val2) #0 {
entry:
  call void @llvm.dbg.value(metadata double %val1, i64 0, metadata !80, metadata !42), !dbg !81
  call void @llvm.dbg.value(metadata double %val2, i64 0, metadata !82, metadata !42), !dbg !83
  %conv = fptrunc double %val1 to float, !dbg !84
  %call = call float @absVal(float %conv), !dbg !86
  %conv1 = fpext float %call to double, !dbg !86
  %cmp = fcmp olt double %conv1, 1.000000e-02, !dbg !87
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !88

land.lhs.true:                                    ; preds = %entry
  %conv3 = fptrunc double %val2 to float, !dbg !89
  %call4 = call float @absVal(float %conv3), !dbg !91
  %conv5 = fpext float %call4 to double, !dbg !91
  %cmp6 = fcmp olt double %conv5, 1.000000e-02, !dbg !92
  br i1 %cmp6, label %if.then, label %if.else, !dbg !93

if.then:                                          ; preds = %land.lhs.true
  br label %return, !dbg !94

if.else:                                          ; preds = %land.lhs.true, %entry
  %sub = fsub double %val1, %val2, !dbg !96
  %conv8 = fptrunc double %sub to float, !dbg !98
  %call9 = call float @absVal(float %conv8), !dbg !99
  %add = fadd double %val1, 0x3E45798EE0000000, !dbg !100
  %conv10 = fptrunc double %add to float, !dbg !101
  %call11 = call float @absVal(float %conv10), !dbg !102
  %div = fdiv float %call9, %call11, !dbg !103
  %call12 = call float @absVal(float %div), !dbg !104
  %mul = fmul float 1.000000e+02, %call12, !dbg !105
  br label %return, !dbg !106

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi float [ 0.000000e+00, %if.then ], [ %mul, %if.else ]
  ret float %retval.0, !dbg !107
}

; Function Attrs: nounwind uwtable
define void @init_arrays(float* %A, float* %B) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !108, metadata !42), !dbg !109
  call void @llvm.dbg.value(metadata float* %A, i64 0, metadata !110, metadata !42), !dbg !111
  call void @llvm.dbg.value(metadata float* %B, i64 0, metadata !112, metadata !42), !dbg !113
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !108, metadata !42), !dbg !109
  %A2 = ptrtoint float* %A to i64
  %B1 = ptrtoint float* %B to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = add i64 %B1, 4000, !dbg !114
  %5 = add i64 %A2, 4000, !dbg !114
  %6 = add i64 %B1, 4000, !dbg !114
  %7 = add i64 %A2, 4000, !dbg !114
  %8 = add i64 %B1, 4000, !dbg !114
  %9 = add i64 %A2, 4000, !dbg !114
  br label %for.cond, !dbg !117

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !114
  br i1 %cmp, label %for.body, label %for.end, !dbg !118

for.body:                                         ; preds = %for.cond
  %conv = sitofp i32 %i.0 to float, !dbg !119
  %mul = mul nsw i32 3, %i.0, !dbg !121
  %conv1 = sitofp i32 %mul to float, !dbg !122
  %add = fadd float %conv, %conv1, !dbg !123
  %idxprom = sext i32 %i.0 to i64, !dbg !124
  %arrayidx = getelementptr inbounds float, float* %A, i64 %idxprom, !dbg !124
  store float %add, float* %arrayidx, align 4, !dbg !125
  %conv2 = sitofp i32 %i.0 to float, !dbg !126
  %mul3 = mul nsw i32 2, %i.0, !dbg !127
  %conv4 = sitofp i32 %mul3 to float, !dbg !128
  %add5 = fadd float %conv2, %conv4, !dbg !129
  %idxprom6 = sext i32 %i.0 to i64, !dbg !130
  %arrayidx7 = getelementptr inbounds float, float* %B, i64 %idxprom6, !dbg !130
  store float %add5, float* %arrayidx7, align 4, !dbg !131
  br label %for.inc, !dbg !132

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !133
  br label %for.cond, !dbg !134

for.end:                                          ; preds = %for.cond
  ret void, !dbg !135
}

; Function Attrs: nounwind uwtable
define void @product_GPU(float* %A, float* %B, float* %C) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !136, metadata !42), !dbg !137
  call void @llvm.dbg.value(metadata float* %A, i64 0, metadata !138, metadata !42), !dbg !139
  call void @llvm.dbg.value(metadata float* %B, i64 0, metadata !140, metadata !42), !dbg !141
  call void @llvm.dbg.value(metadata float* %C, i64 0, metadata !142, metadata !42), !dbg !143
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !136, metadata !42), !dbg !137
  %A4 = ptrtoint float* %A to i64
  %B3 = ptrtoint float* %B to i64
  %C2 = ptrtoint float* %C to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = add i64 %C2, 4000, !dbg !144
  %7 = add i64 %B3, 4000, !dbg !144
  %8 = add i64 %A4, 4000, !dbg !144
  %9 = add i64 %C2, 4000, !dbg !144
  %10 = add i64 %B3, 4000, !dbg !144
  %11 = add i64 %A4, 4000, !dbg !144
  %12 = add i64 %C2, 4000, !dbg !144
  %13 = add i64 %B3, 4000, !dbg !144
  %14 = add i64 %A4, 4000, !dbg !144
  br label %for.cond, !dbg !148

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !144
  br i1 %cmp, label %for.body, label %for.end, !dbg !149

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !150
  %arrayidx = getelementptr inbounds float, float* %A, i64 %idxprom, !dbg !150
  %tmp = load float, float* %arrayidx, align 4, !dbg !150
  %idxprom1 = sext i32 %i.0 to i64, !dbg !152
  %arrayidx2 = getelementptr inbounds float, float* %B, i64 %idxprom1, !dbg !152
  %tmp1 = load float, float* %arrayidx2, align 4, !dbg !152
  %mul = fmul float %tmp, %tmp1, !dbg !153
  %idxprom3 = sext i32 %i.0 to i64, !dbg !154
  %arrayidx4 = getelementptr inbounds float, float* %C, i64 %idxprom3, !dbg !154
  store float %mul, float* %arrayidx4, align 4, !dbg !155
  br label %for.inc, !dbg !156

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !157
  br label %for.cond, !dbg !158

for.end:                                          ; preds = %for.cond
  ret void, !dbg !159
}

; Function Attrs: nounwind uwtable
define void @product_CPU(float* %A, float* %B, float* %C) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !160, metadata !42), !dbg !161
  call void @llvm.dbg.value(metadata float* %A, i64 0, metadata !162, metadata !42), !dbg !163
  call void @llvm.dbg.value(metadata float* %B, i64 0, metadata !164, metadata !42), !dbg !165
  call void @llvm.dbg.value(metadata float* %C, i64 0, metadata !166, metadata !42), !dbg !167
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !160, metadata !42), !dbg !161
  %A4 = ptrtoint float* %A to i64
  %C3 = ptrtoint float* %C to i64
  %B2 = ptrtoint float* %B to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = add i64 %B2, 4000, !dbg !168
  %7 = add i64 %C3, 4000, !dbg !168
  %8 = add i64 %A4, 4000, !dbg !168
  %9 = add i64 %B2, 4000, !dbg !168
  %10 = add i64 %C3, 4000, !dbg !168
  %11 = add i64 %A4, 4000, !dbg !168
  %12 = add i64 %B2, 4000, !dbg !168
  %13 = add i64 %C3, 4000, !dbg !168
  %14 = add i64 %A4, 4000, !dbg !168
  br label %for.cond, !dbg !171

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !168
  br i1 %cmp, label %for.body, label %for.end, !dbg !172

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !173
  %arrayidx = getelementptr inbounds float, float* %A, i64 %idxprom, !dbg !173
  %tmp = load float, float* %arrayidx, align 4, !dbg !173
  %idxprom1 = sext i32 %i.0 to i64, !dbg !175
  %arrayidx2 = getelementptr inbounds float, float* %B, i64 %idxprom1, !dbg !175
  %tmp1 = load float, float* %arrayidx2, align 4, !dbg !175
  %mul = fmul float %tmp, %tmp1, !dbg !176
  %idxprom3 = sext i32 %i.0 to i64, !dbg !177
  %arrayidx4 = getelementptr inbounds float, float* %C, i64 %idxprom3, !dbg !177
  store float %mul, float* %arrayidx4, align 4, !dbg !178
  br label %for.inc, !dbg !179

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !180
  br label %for.cond, !dbg !181

for.end:                                          ; preds = %for.cond
  ret void, !dbg !182
}

; Function Attrs: nounwind uwtable
define void @compareResults(float* %A, float* %A_outputFromGpu) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !183, metadata !42), !dbg !184
  call void @llvm.dbg.value(metadata i32 %inc7, i64 0, metadata !185, metadata !42), !dbg !186
  call void @llvm.dbg.value(metadata float* %A, i64 0, metadata !187, metadata !42), !dbg !188
  call void @llvm.dbg.value(metadata float* %A_outputFromGpu, i64 0, metadata !189, metadata !42), !dbg !190
  call void @llvm.dbg.declare(metadata !2, metadata !191, metadata !42), !dbg !192
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !183, metadata !42), !dbg !184
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !185, metadata !42), !dbg !186
  %A3 = ptrtoint float* %A to i64
  %A_outputFromGpu2 = ptrtoint float* %A_outputFromGpu to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = ptrtoint float* undef to i64
  %7 = ptrtoint float* undef to i64
  %8 = add i64 %A_outputFromGpu2, 4000, !dbg !193
  %9 = add i64 %A3, 4000, !dbg !193
  %10 = add i64 %A_outputFromGpu2, 4000, !dbg !196
  %11 = add i64 %A3, 4000, !dbg !196
  %12 = add i64 %A_outputFromGpu2, 4000, !dbg !196
  %13 = add i64 %A3, 4000, !dbg !196
  %14 = add i64 %A_outputFromGpu2, 4000, !dbg !193
  %15 = add i64 %A3, 4000, !dbg !193
  %16 = add i64 %A_outputFromGpu2, 4000, !dbg !193
  %17 = add i64 %A3, 4000, !dbg !193
  br label %for.cond, !dbg !199

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc7, %for.inc ]
  %fail.0 = phi i32 [ 0, %entry ], [ %fail.1, %for.inc ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !193
  br i1 %cmp, label %for.body, label %for.end, !dbg !200

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !196
  %arrayidx = getelementptr inbounds float, float* %A, i64 %idxprom, !dbg !196
  %tmp = load float, float* %arrayidx, align 4, !dbg !196
  %conv = fpext float %tmp to double, !dbg !196
  %idxprom1 = sext i32 %i.0 to i64, !dbg !201
  %arrayidx2 = getelementptr inbounds float, float* %A_outputFromGpu, i64 %idxprom1, !dbg !201
  %tmp1 = load float, float* %arrayidx2, align 4, !dbg !201
  %conv3 = fpext float %tmp1 to double, !dbg !201
  %call = call float @percentDiff(double %conv, double %conv3), !dbg !202
  %conv4 = fpext float %call to double, !dbg !202
  %cmp5 = fcmp ogt double %conv4, 5.000000e-02, !dbg !203
  br i1 %cmp5, label %if.then, label %if.end, !dbg !204

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %fail.0, 1, !dbg !205
  br label %if.end, !dbg !207

if.end:                                           ; preds = %if.then, %for.body
  %fail.1 = phi i32 [ %inc, %if.then ], [ %fail.0, %for.body ]
  br label %for.inc, !dbg !208

for.inc:                                          ; preds = %if.end
  %inc7 = add nsw i32 %i.0, 1, !dbg !209
  br label %for.cond, !dbg !210

for.end:                                          ; preds = %for.cond
  %fail.0.lcssa = phi i32 [ %fail.0, %for.cond ]
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.1, i32 0, i32 0), double 5.000000e-02, i32 %fail.0.lcssa), !dbg !211
  ret void, !dbg !212
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !213, metadata !42), !dbg !214
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !215, metadata !42), !dbg !216
  %call = call noalias i8* @malloc(i64 4000) #4, !dbg !217
  %tmp = bitcast i8* %call to float*, !dbg !218
  call void @llvm.dbg.value(metadata float* %tmp, i64 0, metadata !219, metadata !42), !dbg !220
  %call1 = call noalias i8* @malloc(i64 4000) #4, !dbg !221
  %tmp1 = bitcast i8* %call1 to float*, !dbg !222
  call void @llvm.dbg.value(metadata float* %tmp1, i64 0, metadata !223, metadata !42), !dbg !224
  %call2 = call noalias i8* @malloc(i64 4000) #4, !dbg !225
  %tmp2 = bitcast i8* %call2 to float*, !dbg !226
  call void @llvm.dbg.value(metadata float* %tmp2, i64 0, metadata !227, metadata !42), !dbg !228
  %call3 = call noalias i8* @malloc(i64 4000) #4, !dbg !229
  %tmp3 = bitcast i8* %call3 to float*, !dbg !230
  call void @llvm.dbg.value(metadata float* %tmp3, i64 0, metadata !231, metadata !42), !dbg !232
  %tmp4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !233
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0)), !dbg !234
  call void @init_arrays(float* %tmp, float* %tmp1), !dbg !235
  %call5 = call double @rtclock(), !dbg !236
  call void @llvm.dbg.value(metadata double %call5, i64 0, metadata !237, metadata !42), !dbg !238
  call void @product_GPU(float* %tmp, float* %tmp1, float* %tmp3), !dbg !239
  %call6 = call double @rtclock(), !dbg !240
  call void @llvm.dbg.value(metadata double %call6, i64 0, metadata !241, metadata !42), !dbg !242
  %tmp5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !243
  %sub = fsub double %call6, %call5, !dbg !244
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp5, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), double %sub), !dbg !245
  %call8 = call double @rtclock(), !dbg !246
  call void @llvm.dbg.value(metadata double %call8, i64 0, metadata !237, metadata !42), !dbg !238
  call void @product_CPU(float* %tmp, float* %tmp1, float* %tmp2), !dbg !247
  %call9 = call double @rtclock(), !dbg !248
  call void @llvm.dbg.value(metadata double %call9, i64 0, metadata !241, metadata !42), !dbg !242
  %tmp6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !249
  %sub10 = fsub double %call9, %call8, !dbg !250
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i32 0, i32 0), double %sub10), !dbg !251
  call void @compareResults(float* %tmp2, float* %tmp3), !dbg !252
  %tmp7 = bitcast float* %tmp to i8*, !dbg !253
  call void @free(i8* %tmp7) #4, !dbg !254
  %tmp8 = bitcast float* %tmp1 to i8*, !dbg !255
  call void @free(i8* %tmp8) #4, !dbg !256
  %tmp9 = bitcast float* %tmp2 to i8*, !dbg !257
  call void @free(i8* %tmp9) #4, !dbg !258
  %tmp10 = bitcast float* %tmp3 to i8*, !dbg !259
  call void @free(i8* %tmp10) #4, !dbg !260
  ret i32 0, !dbg !261
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!33, !34}
!llvm.ident = !{!35}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/UniBench/benchmarks//mgBench/vector-product/src/vector-product_gpu.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!2 = !{}
!3 = !{!4, !5}
!4 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!6 = !{!7, !12, !15, !18, !21, !24, !25, !26}
!7 = !DISubprogram(name: "rtclock", scope: !8, file: !8, line: 7, type: !9, isLocal: false, isDefinition: true, scopeLine: 8, isOptimized: false, function: double ()* @rtclock, variables: !2)
!8 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/UniBench/benchmarks//mgBench/vector-product/src/../../common/mgbenchUtilFunctions.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!9 = !DISubroutineType(types: !10)
!10 = !{!11}
!11 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!12 = !DISubprogram(name: "absVal", scope: !8, file: !8, line: 18, type: !13, isLocal: false, isDefinition: true, scopeLine: 19, flags: DIFlagPrototyped, isOptimized: false, function: float (float)* @absVal, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{!4, !4}
!15 = !DISubprogram(name: "percentDiff", scope: !8, file: !8, line: 32, type: !16, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, function: float (double, double)* @percentDiff, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{!4, !11, !11}
!18 = !DISubprogram(name: "init_arrays", scope: !1, file: !1, line: 29, type: !19, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*)* @init_arrays, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{null, !5, !5}
!21 = !DISubprogram(name: "product_GPU", scope: !1, file: !1, line: 39, type: !22, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*, float*)* @product_GPU, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{null, !5, !5, !5}
!24 = !DISubprogram(name: "product_CPU", scope: !1, file: !1, line: 55, type: !22, isLocal: false, isDefinition: true, scopeLine: 56, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*, float*)* @product_CPU, variables: !2)
!25 = !DISubprogram(name: "compareResults", scope: !1, file: !1, line: 66, type: !19, isLocal: false, isDefinition: true, scopeLine: 67, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*)* @compareResults, variables: !2)
!26 = !DISubprogram(name: "main", scope: !1, file: !1, line: 85, type: !27, isLocal: false, isDefinition: true, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!27 = !DISubroutineType(types: !28)
!28 = !{!29, !29, !30}
!29 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64, align: 64)
!32 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!33 = !{i32 2, !"Dwarf Version", i32 4}
!34 = !{i32 2, !"Debug Info Version", i32 3}
!35 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!36 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Tzp", scope: !7, file: !8, line: 9, type: !37)
!37 = !DICompositeType(tag: DW_TAG_structure_type, name: "timezone", file: !38, line: 57, size: 64, align: 32, elements: !39)
!38 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/time.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!39 = !{!40, !41}
!40 = !DIDerivedType(tag: DW_TAG_member, name: "tz_minuteswest", scope: !37, file: !38, line: 59, baseType: !29, size: 32, align: 32)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "tz_dsttime", scope: !37, file: !38, line: 60, baseType: !29, size: 32, align: 32, offset: 32)
!42 = !DIExpression()
!43 = !DILocation(line: 9, column: 21, scope: !7)
!44 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Tp", scope: !7, file: !8, line: 10, type: !45)
!45 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !46, line: 31, size: 128, align: 64, elements: !47)
!46 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!47 = !{!48, !52}
!48 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !45, file: !46, line: 33, baseType: !49, size: 64, align: 64)
!49 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !50, line: 149, baseType: !51)
!50 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!51 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !45, file: !46, line: 34, baseType: !53, size: 64, align: 64, offset: 64)
!53 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !50, line: 151, baseType: !51)
!54 = !DILocation(line: 10, column: 20, scope: !7)
!55 = !DILocation(line: 12, column: 12, scope: !7)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "stat", scope: !7, file: !8, line: 11, type: !29)
!57 = !DILocation(line: 11, column: 9, scope: !7)
!58 = !DILocation(line: 13, column: 14, scope: !59)
!59 = distinct !DILexicalBlock(scope: !7, file: !8, line: 13, column: 9)
!60 = !DILocation(line: 13, column: 9, scope: !7)
!61 = !DILocation(line: 13, column: 20, scope: !59)
!62 = !DILocation(line: 14, column: 15, scope: !7)
!63 = !DILocation(line: 14, column: 12, scope: !7)
!64 = !DILocation(line: 14, column: 27, scope: !7)
!65 = !DILocation(line: 14, column: 24, scope: !7)
!66 = !DILocation(line: 14, column: 34, scope: !7)
!67 = !DILocation(line: 14, column: 22, scope: !7)
!68 = !DILocation(line: 14, column: 5, scope: !7)
!69 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !12, file: !8, line: 18, type: !4)
!70 = !DILocation(line: 18, column: 20, scope: !12)
!71 = !DILocation(line: 20, column: 7, scope: !72)
!72 = distinct !DILexicalBlock(scope: !12, file: !8, line: 20, column: 5)
!73 = !DILocation(line: 20, column: 5, scope: !12)
!74 = !DILocation(line: 22, column: 13, scope: !75)
!75 = distinct !DILexicalBlock(scope: !72, file: !8, line: 21, column: 2)
!76 = !DILocation(line: 22, column: 3, scope: !75)
!77 = !DILocation(line: 26, column: 3, scope: !78)
!78 = distinct !DILexicalBlock(scope: !72, file: !8, line: 25, column: 2)
!79 = !DILocation(line: 28, column: 1, scope: !12)
!80 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "val1", arg: 1, scope: !15, file: !8, line: 32, type: !11)
!81 = !DILocation(line: 32, column: 26, scope: !15)
!82 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "val2", arg: 2, scope: !15, file: !8, line: 32, type: !11)
!83 = !DILocation(line: 32, column: 39, scope: !15)
!84 = !DILocation(line: 34, column: 14, scope: !85)
!85 = distinct !DILexicalBlock(scope: !15, file: !8, line: 34, column: 6)
!86 = !DILocation(line: 34, column: 7, scope: !85)
!87 = !DILocation(line: 34, column: 20, scope: !85)
!88 = !DILocation(line: 34, column: 28, scope: !85)
!89 = !DILocation(line: 34, column: 39, scope: !90)
!90 = !DILexicalBlockFile(scope: !85, file: !8, discriminator: 1)
!91 = !DILocation(line: 34, column: 32, scope: !85)
!92 = !DILocation(line: 34, column: 45, scope: !85)
!93 = !DILocation(line: 34, column: 6, scope: !15)
!94 = !DILocation(line: 36, column: 3, scope: !95)
!95 = distinct !DILexicalBlock(scope: !85, file: !8, line: 35, column: 2)
!96 = !DILocation(line: 41, column: 43, scope: !97)
!97 = distinct !DILexicalBlock(scope: !85, file: !8, line: 40, column: 2)
!98 = !DILocation(line: 41, column: 38, scope: !97)
!99 = !DILocation(line: 41, column: 31, scope: !97)
!100 = !DILocation(line: 41, column: 65, scope: !97)
!101 = !DILocation(line: 41, column: 60, scope: !97)
!102 = !DILocation(line: 41, column: 53, scope: !97)
!103 = !DILocation(line: 41, column: 51, scope: !97)
!104 = !DILocation(line: 41, column: 24, scope: !97)
!105 = !DILocation(line: 41, column: 21, scope: !97)
!106 = !DILocation(line: 41, column: 7, scope: !97)
!107 = !DILocation(line: 43, column: 1, scope: !15)
!108 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !18, file: !1, line: 31, type: !29)
!109 = !DILocation(line: 31, column: 9, scope: !18)
!110 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 1, scope: !18, file: !1, line: 29, type: !5)
!111 = !DILocation(line: 29, column: 25, scope: !18)
!112 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 2, scope: !18, file: !1, line: 29, type: !5)
!113 = !DILocation(line: 29, column: 35, scope: !18)
!114 = !DILocation(line: 32, column: 19, scope: !115)
!115 = distinct !DILexicalBlock(scope: !116, file: !1, line: 32, column: 5)
!116 = distinct !DILexicalBlock(scope: !18, file: !1, line: 32, column: 5)
!117 = !DILocation(line: 32, column: 10, scope: !116)
!118 = !DILocation(line: 32, column: 5, scope: !116)
!119 = !DILocation(line: 34, column: 16, scope: !120)
!120 = distinct !DILexicalBlock(scope: !115, file: !1, line: 33, column: 5)
!121 = !DILocation(line: 34, column: 28, scope: !120)
!122 = !DILocation(line: 34, column: 27, scope: !120)
!123 = !DILocation(line: 34, column: 25, scope: !120)
!124 = !DILocation(line: 34, column: 9, scope: !120)
!125 = !DILocation(line: 34, column: 14, scope: !120)
!126 = !DILocation(line: 35, column: 16, scope: !120)
!127 = !DILocation(line: 35, column: 28, scope: !120)
!128 = !DILocation(line: 35, column: 27, scope: !120)
!129 = !DILocation(line: 35, column: 25, scope: !120)
!130 = !DILocation(line: 35, column: 9, scope: !120)
!131 = !DILocation(line: 35, column: 14, scope: !120)
!132 = !DILocation(line: 36, column: 5, scope: !120)
!133 = !DILocation(line: 32, column: 27, scope: !115)
!134 = !DILocation(line: 32, column: 5, scope: !115)
!135 = !DILocation(line: 37, column: 1, scope: !18)
!136 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !21, file: !1, line: 41, type: !29)
!137 = !DILocation(line: 41, column: 9, scope: !21)
!138 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 1, scope: !21, file: !1, line: 39, type: !5)
!139 = !DILocation(line: 39, column: 25, scope: !21)
!140 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 2, scope: !21, file: !1, line: 39, type: !5)
!141 = !DILocation(line: 39, column: 35, scope: !21)
!142 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 3, scope: !21, file: !1, line: 39, type: !5)
!143 = !DILocation(line: 39, column: 45, scope: !21)
!144 = !DILocation(line: 47, column: 23, scope: !145)
!145 = distinct !DILexicalBlock(scope: !146, file: !1, line: 47, column: 9)
!146 = distinct !DILexicalBlock(scope: !147, file: !1, line: 47, column: 9)
!147 = distinct !DILexicalBlock(scope: !21, file: !1, line: 45, column: 5)
!148 = !DILocation(line: 47, column: 14, scope: !146)
!149 = !DILocation(line: 47, column: 9, scope: !146)
!150 = !DILocation(line: 49, column: 20, scope: !151)
!151 = distinct !DILexicalBlock(scope: !145, file: !1, line: 48, column: 2)
!152 = !DILocation(line: 49, column: 27, scope: !151)
!153 = !DILocation(line: 49, column: 25, scope: !151)
!154 = !DILocation(line: 49, column: 13, scope: !151)
!155 = !DILocation(line: 49, column: 18, scope: !151)
!156 = !DILocation(line: 50, column: 2, scope: !151)
!157 = !DILocation(line: 47, column: 31, scope: !145)
!158 = !DILocation(line: 47, column: 9, scope: !145)
!159 = !DILocation(line: 53, column: 1, scope: !21)
!160 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !24, file: !1, line: 57, type: !29)
!161 = !DILocation(line: 57, column: 9, scope: !24)
!162 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 1, scope: !24, file: !1, line: 55, type: !5)
!163 = !DILocation(line: 55, column: 25, scope: !24)
!164 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 2, scope: !24, file: !1, line: 55, type: !5)
!165 = !DILocation(line: 55, column: 35, scope: !24)
!166 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 3, scope: !24, file: !1, line: 55, type: !5)
!167 = !DILocation(line: 55, column: 45, scope: !24)
!168 = !DILocation(line: 59, column: 19, scope: !169)
!169 = distinct !DILexicalBlock(scope: !170, file: !1, line: 59, column: 5)
!170 = distinct !DILexicalBlock(scope: !24, file: !1, line: 59, column: 5)
!171 = !DILocation(line: 59, column: 10, scope: !170)
!172 = !DILocation(line: 59, column: 5, scope: !170)
!173 = !DILocation(line: 61, column: 16, scope: !174)
!174 = distinct !DILexicalBlock(scope: !169, file: !1, line: 60, column: 5)
!175 = !DILocation(line: 61, column: 23, scope: !174)
!176 = !DILocation(line: 61, column: 21, scope: !174)
!177 = !DILocation(line: 61, column: 9, scope: !174)
!178 = !DILocation(line: 61, column: 14, scope: !174)
!179 = !DILocation(line: 62, column: 5, scope: !174)
!180 = !DILocation(line: 59, column: 27, scope: !169)
!181 = !DILocation(line: 59, column: 5, scope: !169)
!182 = !DILocation(line: 63, column: 1, scope: !24)
!183 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fail", scope: !25, file: !1, line: 68, type: !29)
!184 = !DILocation(line: 68, column: 15, scope: !25)
!185 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !25, file: !1, line: 68, type: !29)
!186 = !DILocation(line: 68, column: 9, scope: !25)
!187 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 1, scope: !25, file: !1, line: 66, type: !5)
!188 = !DILocation(line: 66, column: 28, scope: !25)
!189 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A_outputFromGpu", arg: 2, scope: !25, file: !1, line: 66, type: !5)
!190 = !DILocation(line: 66, column: 38, scope: !25)
!191 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !25, file: !1, line: 68, type: !29)
!192 = !DILocation(line: 68, column: 12, scope: !25)
!193 = !DILocation(line: 71, column: 17, scope: !194)
!194 = distinct !DILexicalBlock(scope: !195, file: !1, line: 71, column: 5)
!195 = distinct !DILexicalBlock(scope: !25, file: !1, line: 71, column: 5)
!196 = !DILocation(line: 73, column: 25, scope: !197)
!197 = distinct !DILexicalBlock(scope: !198, file: !1, line: 73, column: 13)
!198 = distinct !DILexicalBlock(scope: !194, file: !1, line: 72, column: 5)
!199 = !DILocation(line: 71, column: 10, scope: !195)
!200 = !DILocation(line: 71, column: 5, scope: !195)
!201 = !DILocation(line: 73, column: 31, scope: !197)
!202 = !DILocation(line: 73, column: 13, scope: !197)
!203 = !DILocation(line: 73, column: 51, scope: !197)
!204 = !DILocation(line: 73, column: 13, scope: !198)
!205 = !DILocation(line: 75, column: 10, scope: !206)
!206 = distinct !DILexicalBlock(scope: !197, file: !1, line: 74, column: 2)
!207 = !DILocation(line: 77, column: 2, scope: !206)
!208 = !DILocation(line: 78, column: 5, scope: !198)
!209 = !DILocation(line: 71, column: 26, scope: !194)
!210 = !DILocation(line: 71, column: 5, scope: !194)
!211 = !DILocation(line: 81, column: 3, scope: !25)
!212 = !DILocation(line: 82, column: 1, scope: !25)
!213 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !26, file: !1, line: 85, type: !29)
!214 = !DILocation(line: 85, column: 14, scope: !26)
!215 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !26, file: !1, line: 85, type: !30)
!216 = !DILocation(line: 85, column: 26, scope: !26)
!217 = !DILocation(line: 90, column: 19, scope: !26)
!218 = !DILocation(line: 90, column: 9, scope: !26)
!219 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "A", scope: !26, file: !1, line: 88, type: !5)
!220 = !DILocation(line: 88, column: 12, scope: !26)
!221 = !DILocation(line: 91, column: 19, scope: !26)
!222 = !DILocation(line: 91, column: 9, scope: !26)
!223 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "B", scope: !26, file: !1, line: 88, type: !5)
!224 = !DILocation(line: 88, column: 16, scope: !26)
!225 = !DILocation(line: 92, column: 23, scope: !26)
!226 = !DILocation(line: 92, column: 13, scope: !26)
!227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "C_CPU", scope: !26, file: !1, line: 88, type: !5)
!228 = !DILocation(line: 88, column: 20, scope: !26)
!229 = !DILocation(line: 93, column: 23, scope: !26)
!230 = !DILocation(line: 93, column: 13, scope: !26)
!231 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "C_GPU", scope: !26, file: !1, line: 88, type: !5)
!232 = !DILocation(line: 88, column: 28, scope: !26)
!233 = !DILocation(line: 96, column: 13, scope: !26)
!234 = !DILocation(line: 96, column: 5, scope: !26)
!235 = !DILocation(line: 97, column: 5, scope: !26)
!236 = !DILocation(line: 99, column: 15, scope: !26)
!237 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t_start", scope: !26, file: !1, line: 87, type: !11)
!238 = !DILocation(line: 87, column: 12, scope: !26)
!239 = !DILocation(line: 100, column: 5, scope: !26)
!240 = !DILocation(line: 101, column: 13, scope: !26)
!241 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t_end", scope: !26, file: !1, line: 87, type: !11)
!242 = !DILocation(line: 87, column: 21, scope: !26)
!243 = !DILocation(line: 102, column: 13, scope: !26)
!244 = !DILocation(line: 102, column: 53, scope: !26)
!245 = !DILocation(line: 102, column: 5, scope: !26)
!246 = !DILocation(line: 105, column: 15, scope: !26)
!247 = !DILocation(line: 106, column: 5, scope: !26)
!248 = !DILocation(line: 107, column: 13, scope: !26)
!249 = !DILocation(line: 108, column: 13, scope: !26)
!250 = !DILocation(line: 108, column: 53, scope: !26)
!251 = !DILocation(line: 108, column: 5, scope: !26)
!252 = !DILocation(line: 110, column: 5, scope: !26)
!253 = !DILocation(line: 112, column: 10, scope: !26)
!254 = !DILocation(line: 112, column: 5, scope: !26)
!255 = !DILocation(line: 113, column: 10, scope: !26)
!256 = !DILocation(line: 113, column: 5, scope: !26)
!257 = !DILocation(line: 114, column: 10, scope: !26)
!258 = !DILocation(line: 114, column: 5, scope: !26)
!259 = !DILocation(line: 115, column: 10, scope: !26)
!260 = !DILocation(line: 115, column: 5, scope: !26)
!261 = !DILocation(line: 117, column: 5, scope: !26)
