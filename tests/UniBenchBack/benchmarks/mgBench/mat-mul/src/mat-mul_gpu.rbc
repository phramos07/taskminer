; ModuleID = '/home/gleison/lge/dawn-3.7/UniBench/benchmarks//mgBench/mat-mul/src/mat-mul_gpu.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timezone = type { i32, i32 }
%struct.timeval = type { i64, i64 }

@.str = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
@.str.1 = private unnamed_addr constant [74 x i8] c"Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\0A\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [29 x i8] c"<< Matrix Multiplication >>\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"GPU Runtime: %0.6lfs\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"CPU Runtime: %0.6lfs\0A\00", align 1

; Function Attrs: nounwind uwtable
define double @rtclock() #0 {
entry:
  %Tzp = alloca %struct.timezone, align 4
  %Tp = alloca %struct.timeval, align 8
  call void @llvm.dbg.declare(metadata %struct.timezone* %Tzp, metadata !38, metadata !44), !dbg !45
  call void @llvm.dbg.declare(metadata %struct.timeval* %Tp, metadata !46, metadata !44), !dbg !56
  %call = call i32 @gettimeofday(%struct.timeval* %Tp, %struct.timezone* %Tzp) #4, !dbg !57
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !58, metadata !44), !dbg !59
  %cmp = icmp ne i32 %call, 0, !dbg !60
  br i1 %cmp, label %if.then, label %if.end, !dbg !62

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i32 %call), !dbg !63
  br label %if.end, !dbg !63

if.end:                                           ; preds = %if.then, %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %Tp, i32 0, i32 0, !dbg !64
  %tmp = load i64, i64* %tv_sec, align 8, !dbg !64
  %conv = sitofp i64 %tmp to double, !dbg !65
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %Tp, i32 0, i32 1, !dbg !66
  %tmp1 = load i64, i64* %tv_usec, align 8, !dbg !66
  %conv2 = sitofp i64 %tmp1 to double, !dbg !67
  %mul = fmul double %conv2, 1.000000e-06, !dbg !68
  %add = fadd double %conv, %mul, !dbg !69
  ret double %add, !dbg !70
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind uwtable
define float @absVal(float %a) #0 {
entry:
  call void @llvm.dbg.value(metadata float %a, i64 0, metadata !71, metadata !44), !dbg !72
  %cmp = fcmp olt float %a, 0.000000e+00, !dbg !73
  br i1 %cmp, label %if.then, label %if.else, !dbg !75

if.then:                                          ; preds = %entry
  %mul = fmul float %a, -1.000000e+00, !dbg !76
  br label %return, !dbg !78

if.else:                                          ; preds = %entry
  br label %return, !dbg !79

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi float [ %mul, %if.then ], [ %a, %if.else ]
  ret float %retval.0, !dbg !81
}

; Function Attrs: nounwind uwtable
define float @percentDiff(double %val1, double %val2) #0 {
entry:
  call void @llvm.dbg.value(metadata double %val1, i64 0, metadata !82, metadata !44), !dbg !83
  call void @llvm.dbg.value(metadata double %val2, i64 0, metadata !84, metadata !44), !dbg !85
  %conv = fptrunc double %val1 to float, !dbg !86
  %call = call float @absVal(float %conv), !dbg !88
  %conv1 = fpext float %call to double, !dbg !88
  %cmp = fcmp olt double %conv1, 1.000000e-02, !dbg !89
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !90

land.lhs.true:                                    ; preds = %entry
  %conv3 = fptrunc double %val2 to float, !dbg !91
  %call4 = call float @absVal(float %conv3), !dbg !93
  %conv5 = fpext float %call4 to double, !dbg !93
  %cmp6 = fcmp olt double %conv5, 1.000000e-02, !dbg !94
  br i1 %cmp6, label %if.then, label %if.else, !dbg !95

if.then:                                          ; preds = %land.lhs.true
  br label %return, !dbg !96

if.else:                                          ; preds = %land.lhs.true, %entry
  %sub = fsub double %val1, %val2, !dbg !98
  %conv8 = fptrunc double %sub to float, !dbg !100
  %call9 = call float @absVal(float %conv8), !dbg !101
  %add = fadd double %val1, 0x3E45798EE0000000, !dbg !102
  %conv10 = fptrunc double %add to float, !dbg !103
  %call11 = call float @absVal(float %conv10), !dbg !104
  %div = fdiv float %call9, %call11, !dbg !105
  %call12 = call float @absVal(float %div), !dbg !106
  %mul = fmul float 1.000000e+02, %call12, !dbg !107
  br label %return, !dbg !108

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi float [ 0.000000e+00, %if.then ], [ %mul, %if.else ]
  ret float %retval.0, !dbg !109
}

; Function Attrs: nounwind uwtable
define void @init(float* %a, float* %b, float* %c_cpu, float* %c_gpu) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !110, metadata !44), !dbg !111
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !110, metadata !44), !dbg !111
  call void @llvm.dbg.value(metadata i32 %inc23, i64 0, metadata !112, metadata !44), !dbg !113
  call void @llvm.dbg.value(metadata float* %a, i64 0, metadata !114, metadata !44), !dbg !115
  call void @llvm.dbg.value(metadata float* %b, i64 0, metadata !116, metadata !44), !dbg !117
  call void @llvm.dbg.value(metadata float* %c_cpu, i64 0, metadata !118, metadata !44), !dbg !119
  call void @llvm.dbg.value(metadata float* %c_gpu, i64 0, metadata !120, metadata !44), !dbg !121
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !112, metadata !44), !dbg !113
  %a4 = ptrtoint float* %a to i64
  %b3 = ptrtoint float* %b to i64
  %c_gpu2 = ptrtoint float* %c_gpu to i64
  %c_cpu1 = ptrtoint float* %c_cpu to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = ptrtoint float* undef to i64
  %7 = ptrtoint float* undef to i64
  %8 = ptrtoint float* undef to i64
  %9 = ptrtoint float* undef to i64
  %10 = ptrtoint float* undef to i64
  %11 = ptrtoint float* undef to i64
  %12 = ptrtoint float* undef to i64
  %13 = ptrtoint float* undef to i64
  %14 = ptrtoint float* undef to i64
  %15 = ptrtoint float* undef to i64
  %16 = ptrtoint float* undef to i64
  %17 = ptrtoint float* undef to i64
  %18 = ptrtoint float* undef to i64
  %19 = ptrtoint float* undef to i64
  %20 = ptrtoint float* undef to i64
  %21 = ptrtoint float* undef to i64
  %22 = ptrtoint float* undef to i64
  %23 = ptrtoint float* undef to i64
  %24 = add i64 %c_cpu1, 4000000, !dbg !122
  %25 = add i64 %24, 4000, !dbg !122
  %26 = add i64 %c_gpu2, 4000000, !dbg !122
  %27 = add i64 %26, 4000, !dbg !122
  %28 = add i64 %b3, 4000000, !dbg !122
  %29 = add i64 %28, 4000, !dbg !122
  %30 = add i64 %a4, 4000000, !dbg !122
  %31 = add i64 %30, 4000, !dbg !122
  %32 = add i64 %c_cpu1, 4000000, !dbg !122
  %33 = add i64 %32, 4000, !dbg !122
  %34 = add i64 %c_gpu2, 4000000, !dbg !122
  %35 = add i64 %34, 4000, !dbg !122
  %36 = add i64 %b3, 4000000, !dbg !122
  %37 = add i64 %36, 4000, !dbg !122
  %38 = add i64 %a4, 4000000, !dbg !122
  %39 = add i64 %38, 4000, !dbg !122
  %40 = add i64 %c_cpu1, 4000000, !dbg !125
  %41 = add i64 %40, 4000, !dbg !125
  %42 = add i64 %c_gpu2, 4000000, !dbg !125
  %43 = add i64 %42, 4000, !dbg !125
  %44 = add i64 %b3, 4000000, !dbg !125
  %45 = add i64 %44, 4000, !dbg !125
  %46 = add i64 %a4, 4000000, !dbg !125
  %47 = add i64 %46, 4000, !dbg !125
  %48 = add i64 %c_cpu1, 4000000, !dbg !122
  %49 = add i64 %48, 4000, !dbg !122
  %50 = add i64 %c_gpu2, 4000000, !dbg !122
  %51 = add i64 %50, 4000, !dbg !122
  %52 = add i64 %b3, 4000000, !dbg !122
  %53 = add i64 %52, 4000, !dbg !122
  %54 = add i64 %a4, 4000000, !dbg !122
  %55 = add i64 %54, 4000, !dbg !122
  %56 = add i64 %c_cpu1, 4000000, !dbg !122
  %57 = add i64 %56, 4000, !dbg !122
  %58 = add i64 %c_gpu2, 4000000, !dbg !122
  %59 = add i64 %58, 4000, !dbg !122
  %60 = add i64 %b3, 4000000, !dbg !122
  %61 = add i64 %60, 4000, !dbg !122
  %62 = add i64 %a4, 4000000, !dbg !122
  %63 = add i64 %62, 4000, !dbg !122
  %64 = add i64 %c_cpu1, 4000000, !dbg !125
  %65 = add i64 %64, 4000, !dbg !125
  %66 = add i64 %c_gpu2, 4000000, !dbg !125
  %67 = add i64 %66, 4000, !dbg !125
  %68 = add i64 %b3, 4000000, !dbg !125
  %69 = add i64 %68, 4000, !dbg !125
  %70 = add i64 %a4, 4000000, !dbg !125
  %71 = add i64 %70, 4000, !dbg !125
  %72 = add i64 %c_cpu1, 4000000, !dbg !125
  %73 = add i64 %72, 4000, !dbg !125
  %74 = add i64 %c_gpu2, 4000000, !dbg !125
  %75 = add i64 %74, 4000, !dbg !125
  %76 = add i64 %b3, 4000000, !dbg !125
  %77 = add i64 %76, 4000, !dbg !125
  %78 = add i64 %a4, 4000000, !dbg !125
  %79 = add i64 %78, 4000, !dbg !125
  br label %for.cond, !dbg !129

for.cond:                                         ; preds = %for.inc.22, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc23, %for.inc.22 ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !122
  br i1 %cmp, label %for.body, label %for.end.24, !dbg !130

for.body:                                         ; preds = %for.cond
  br label %for.cond.1, !dbg !131

for.cond.1:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp2 = icmp slt i32 %j.0, 1000, !dbg !125
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !132

for.body.3:                                       ; preds = %for.cond.1
  %conv = sitofp i32 %i.0 to float, !dbg !133
  %rem = srem i32 %j.0, 100, !dbg !135
  %conv4 = sitofp i32 %rem to float, !dbg !136
  %add = fadd float %conv, %conv4, !dbg !137
  %mul = mul nsw i32 %i.0, 1000, !dbg !138
  %add5 = add nsw i32 %mul, %j.0, !dbg !139
  %idxprom = sext i32 %add5 to i64, !dbg !140
  %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !140
  store float %add, float* %arrayidx, align 4, !dbg !141
  %conv6 = sitofp i32 %i.0 to float, !dbg !142
  %rem7 = srem i32 %j.0, 100, !dbg !143
  %conv8 = sitofp i32 %rem7 to float, !dbg !144
  %add9 = fadd float %conv6, %conv8, !dbg !145
  %mul10 = mul nsw i32 %i.0, 1000, !dbg !146
  %add11 = add nsw i32 %mul10, %j.0, !dbg !147
  %idxprom12 = sext i32 %add11 to i64, !dbg !148
  %arrayidx13 = getelementptr inbounds float, float* %b, i64 %idxprom12, !dbg !148
  store float %add9, float* %arrayidx13, align 4, !dbg !149
  %mul14 = mul nsw i32 %i.0, 1000, !dbg !150
  %add15 = add nsw i32 %mul14, %j.0, !dbg !151
  %idxprom16 = sext i32 %add15 to i64, !dbg !152
  %arrayidx17 = getelementptr inbounds float, float* %c_cpu, i64 %idxprom16, !dbg !152
  store float 0.000000e+00, float* %arrayidx17, align 4, !dbg !153
  %mul18 = mul nsw i32 %i.0, 1000, !dbg !154
  %add19 = add nsw i32 %mul18, %j.0, !dbg !155
  %idxprom20 = sext i32 %add19 to i64, !dbg !156
  %arrayidx21 = getelementptr inbounds float, float* %c_gpu, i64 %idxprom20, !dbg !156
  store float 0.000000e+00, float* %arrayidx21, align 4, !dbg !157
  br label %for.inc, !dbg !158

for.inc:                                          ; preds = %for.body.3
  %inc = add nsw i32 %j.0, 1, !dbg !159
  br label %for.cond.1, !dbg !160

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.22, !dbg !161

for.inc.22:                                       ; preds = %for.end
  %inc23 = add nsw i32 %i.0, 1, !dbg !162
  br label %for.cond, !dbg !163

for.end.24:                                       ; preds = %for.cond
  ret void, !dbg !164
}

; Function Attrs: nounwind uwtable
define void @mul_GPU(float* %a, float* %b, float* %c) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !165, metadata !44), !dbg !166
  call void @llvm.dbg.value(metadata i32 %inc21, i64 0, metadata !167, metadata !44), !dbg !168
  call void @llvm.dbg.value(metadata float %add12, i64 0, metadata !169, metadata !44), !dbg !170
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !171, metadata !44), !dbg !172
  call void @llvm.dbg.value(metadata float 0.000000e+00, i64 0, metadata !169, metadata !44), !dbg !170
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !171, metadata !44), !dbg !172
  call void @llvm.dbg.value(metadata i32 %inc18, i64 0, metadata !165, metadata !44), !dbg !166
  call void @llvm.dbg.value(metadata float* %a, i64 0, metadata !173, metadata !44), !dbg !174
  call void @llvm.dbg.value(metadata float* %b, i64 0, metadata !175, metadata !44), !dbg !176
  call void @llvm.dbg.value(metadata float* %c, i64 0, metadata !177, metadata !44), !dbg !178
  call void @llvm.dbg.value(metadata float 0.000000e+00, i64 0, metadata !169, metadata !44), !dbg !170
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !167, metadata !44), !dbg !168
  %b3 = ptrtoint float* %b to i64
  %a2 = ptrtoint float* %a to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %c4 = ptrtoint float* %c to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = ptrtoint float* undef to i64
  %7 = ptrtoint float* undef to i64
  %8 = ptrtoint float* undef to i64
  %9 = ptrtoint float* undef to i64
  %10 = ptrtoint float* undef to i64
  %11 = ptrtoint float* undef to i64
  %12 = ptrtoint float* undef to i64
  %13 = ptrtoint float* undef to i64
  %14 = ptrtoint float* undef to i64
  %15 = ptrtoint float* undef to i64
  %16 = ptrtoint float* undef to i64
  %17 = ptrtoint float* undef to i64
  %18 = ptrtoint float* undef to i64
  %19 = ptrtoint float* undef to i64
  %20 = ptrtoint float* undef to i64
  %21 = ptrtoint float* undef to i64
  %22 = ptrtoint float* undef to i64
  %23 = ptrtoint float* undef to i64
  %24 = ptrtoint float* undef to i64
  %25 = ptrtoint float* undef to i64
  %26 = ptrtoint float* undef to i64
  %27 = add i64 %a2, 4000000, !dbg !179
  %28 = add i64 %27, 4000, !dbg !179
  %29 = add i64 %b3, 4000, !dbg !179
  %30 = add i64 %29, 4000000, !dbg !179
  %31 = add i64 %c4, 4000000, !dbg !179
  %32 = add i64 %31, 4000, !dbg !179
  %33 = add i64 %a2, 4000000, !dbg !179
  %34 = add i64 %33, 4000, !dbg !179
  %35 = add i64 %b3, 4000, !dbg !179
  %36 = add i64 %35, 4000000, !dbg !179
  %37 = add i64 %c4, 4000000, !dbg !179
  %38 = add i64 %37, 4000, !dbg !179
  %39 = add i64 %a2, 4000000, !dbg !183
  %40 = add i64 %39, 4000, !dbg !183
  %41 = add i64 %b3, 4000, !dbg !183
  %42 = add i64 %41, 4000000, !dbg !183
  %43 = add i64 %c4, 4000000, !dbg !183
  %44 = add i64 %43, 4000, !dbg !183
  %45 = add i64 %a2, 4000000, !dbg !179
  %46 = add i64 %45, 4000, !dbg !179
  %47 = add i64 %b3, 4000, !dbg !179
  %48 = add i64 %47, 4000000, !dbg !179
  %49 = add i64 %c4, 4000000, !dbg !179
  %50 = add i64 %49, 4000, !dbg !179
  %51 = add i64 %a2, 4000000, !dbg !179
  %52 = add i64 %51, 4000, !dbg !179
  %53 = add i64 %b3, 4000, !dbg !179
  %54 = add i64 %53, 4000000, !dbg !179
  %55 = add i64 %c4, 4000000, !dbg !179
  %56 = add i64 %55, 4000, !dbg !179
  %57 = add i64 %a2, 4000000, !dbg !183
  %58 = add i64 %57, 4000, !dbg !183
  %59 = add i64 %b3, 4000, !dbg !183
  %60 = add i64 %59, 4000000, !dbg !183
  %61 = add i64 %c4, 4000000, !dbg !183
  %62 = add i64 %61, 4000, !dbg !183
  %63 = add i64 %a2, 4000000, !dbg !187
  %64 = add i64 %63, 4000, !dbg !187
  %65 = add i64 %b3, 4000, !dbg !187
  %66 = add i64 %65, 4000000, !dbg !187
  %67 = add i64 %a2, 4000000, !dbg !183
  %68 = add i64 %67, 4000, !dbg !183
  %69 = add i64 %b3, 4000, !dbg !183
  %70 = add i64 %69, 4000000, !dbg !183
  %71 = add i64 %c4, 4000000, !dbg !183
  %72 = add i64 %71, 4000, !dbg !183
  %73 = add i64 %a2, 4000000, !dbg !183
  %74 = add i64 %73, 4000, !dbg !183
  %75 = add i64 %b3, 4000, !dbg !183
  %76 = add i64 %75, 4000000, !dbg !183
  %77 = add i64 %c4, 4000000, !dbg !183
  %78 = add i64 %77, 4000, !dbg !183
  %79 = add i64 %a2, 4000000, !dbg !187
  %80 = add i64 %79, 4000, !dbg !187
  %81 = add i64 %b3, 4000, !dbg !187
  %82 = add i64 %81, 4000000, !dbg !187
  %83 = add i64 %a2, 4000000, !dbg !187
  %84 = add i64 %83, 4000, !dbg !187
  %85 = add i64 %b3, 4000, !dbg !187
  %86 = add i64 %85, 4000000, !dbg !187
  br label %for.cond, !dbg !191

for.cond:                                         ; preds = %for.inc.20, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc21, %for.inc.20 ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !179
  br i1 %cmp, label %for.body, label %for.end.22, !dbg !192

for.body:                                         ; preds = %for.cond
  br label %for.cond.1, !dbg !193

for.cond.1:                                       ; preds = %for.inc.17, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc18, %for.inc.17 ]
  %cmp2 = icmp slt i32 %j.0, 1000, !dbg !183
  br i1 %cmp2, label %for.body.3, label %for.end.19, !dbg !194

for.body.3:                                       ; preds = %for.cond.1
  br label %for.cond.4, !dbg !195

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %k.0 = phi i32 [ 0, %for.body.3 ], [ %inc, %for.inc ]
  %sum.0 = phi float [ 0.000000e+00, %for.body.3 ], [ %add12, %for.inc ]
  %cmp5 = icmp slt i32 %k.0, 1000, !dbg !187
  br i1 %cmp5, label %for.body.6, label %for.end, !dbg !196

for.body.6:                                       ; preds = %for.cond.4
  %mul = mul nsw i32 %i.0, 1000, !dbg !197
  %add = add nsw i32 %mul, %k.0, !dbg !199
  %idxprom = sext i32 %add to i64, !dbg !200
  %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !200
  %tmp = load float, float* %arrayidx, align 4, !dbg !200
  %mul7 = mul nsw i32 %k.0, 1000, !dbg !201
  %add8 = add nsw i32 %mul7, %j.0, !dbg !202
  %idxprom9 = sext i32 %add8 to i64, !dbg !203
  %arrayidx10 = getelementptr inbounds float, float* %b, i64 %idxprom9, !dbg !203
  %tmp1 = load float, float* %arrayidx10, align 4, !dbg !203
  %mul11 = fmul float %tmp, %tmp1, !dbg !204
  %add12 = fadd float %sum.0, %mul11, !dbg !205
  br label %for.inc, !dbg !206

for.inc:                                          ; preds = %for.body.6
  %inc = add nsw i32 %k.0, 1, !dbg !207
  br label %for.cond.4, !dbg !208

for.end:                                          ; preds = %for.cond.4
  %sum.0.lcssa = phi float [ %sum.0, %for.cond.4 ]
  %mul13 = mul nsw i32 %i.0, 1000, !dbg !209
  %add14 = add nsw i32 %mul13, %j.0, !dbg !210
  %idxprom15 = sext i32 %add14 to i64, !dbg !211
  %arrayidx16 = getelementptr inbounds float, float* %c, i64 %idxprom15, !dbg !211
  store float %sum.0.lcssa, float* %arrayidx16, align 4, !dbg !212
  br label %for.inc.17, !dbg !213

for.inc.17:                                       ; preds = %for.end
  %inc18 = add nsw i32 %j.0, 1, !dbg !214
  br label %for.cond.1, !dbg !215

for.end.19:                                       ; preds = %for.cond.1
  br label %for.inc.20, !dbg !216

for.inc.20:                                       ; preds = %for.end.19
  %inc21 = add nsw i32 %i.0, 1, !dbg !217
  br label %for.cond, !dbg !218

for.end.22:                                       ; preds = %for.cond
  ret void, !dbg !219
}

; Function Attrs: nounwind uwtable
define void @mul_CPU(float* %a, float* %b, float* %c) #0 {
entry:
  call void @llvm.dbg.value(metadata float %add12, i64 0, metadata !220, metadata !44), !dbg !221
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !222, metadata !44), !dbg !223
  call void @llvm.dbg.value(metadata float 0.000000e+00, i64 0, metadata !220, metadata !44), !dbg !221
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !222, metadata !44), !dbg !223
  call void @llvm.dbg.value(metadata i32 %inc18, i64 0, metadata !224, metadata !44), !dbg !225
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !224, metadata !44), !dbg !225
  call void @llvm.dbg.value(metadata i32 %inc21, i64 0, metadata !226, metadata !44), !dbg !227
  call void @llvm.dbg.value(metadata float* %a, i64 0, metadata !228, metadata !44), !dbg !229
  call void @llvm.dbg.value(metadata float* %b, i64 0, metadata !230, metadata !44), !dbg !231
  call void @llvm.dbg.value(metadata float* %c, i64 0, metadata !232, metadata !44), !dbg !233
  call void @llvm.dbg.value(metadata float 0.000000e+00, i64 0, metadata !220, metadata !44), !dbg !221
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !226, metadata !44), !dbg !227
  %a4 = ptrtoint float* %a to i64
  %b3 = ptrtoint float* %b to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %c2 = ptrtoint float* %c to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = ptrtoint float* undef to i64
  %7 = ptrtoint float* undef to i64
  %8 = ptrtoint float* undef to i64
  %9 = ptrtoint float* undef to i64
  %10 = ptrtoint float* undef to i64
  %11 = ptrtoint float* undef to i64
  %12 = ptrtoint float* undef to i64
  %13 = ptrtoint float* undef to i64
  %14 = ptrtoint float* undef to i64
  %15 = ptrtoint float* undef to i64
  %16 = ptrtoint float* undef to i64
  %17 = ptrtoint float* undef to i64
  %18 = ptrtoint float* undef to i64
  %19 = ptrtoint float* undef to i64
  %20 = ptrtoint float* undef to i64
  %21 = ptrtoint float* undef to i64
  %22 = ptrtoint float* undef to i64
  %23 = ptrtoint float* undef to i64
  %24 = ptrtoint float* undef to i64
  %25 = ptrtoint float* undef to i64
  %26 = ptrtoint float* undef to i64
  %27 = add i64 %c2, 4000000, !dbg !234
  %28 = add i64 %27, 4000, !dbg !234
  %29 = add i64 %b3, 4000, !dbg !234
  %30 = add i64 %29, 4000000, !dbg !234
  %31 = add i64 %a4, 4000000, !dbg !234
  %32 = add i64 %31, 4000, !dbg !234
  %33 = add i64 %c2, 4000000, !dbg !234
  %34 = add i64 %33, 4000, !dbg !234
  %35 = add i64 %b3, 4000, !dbg !234
  %36 = add i64 %35, 4000000, !dbg !234
  %37 = add i64 %a4, 4000000, !dbg !234
  %38 = add i64 %37, 4000, !dbg !234
  %39 = add i64 %c2, 4000000, !dbg !237
  %40 = add i64 %39, 4000, !dbg !237
  %41 = add i64 %b3, 4000, !dbg !237
  %42 = add i64 %41, 4000000, !dbg !237
  %43 = add i64 %a4, 4000000, !dbg !237
  %44 = add i64 %43, 4000, !dbg !237
  %45 = add i64 %c2, 4000000, !dbg !234
  %46 = add i64 %45, 4000, !dbg !234
  %47 = add i64 %b3, 4000, !dbg !234
  %48 = add i64 %47, 4000000, !dbg !234
  %49 = add i64 %a4, 4000000, !dbg !234
  %50 = add i64 %49, 4000, !dbg !234
  %51 = add i64 %c2, 4000000, !dbg !234
  %52 = add i64 %51, 4000, !dbg !234
  %53 = add i64 %b3, 4000, !dbg !234
  %54 = add i64 %53, 4000000, !dbg !234
  %55 = add i64 %a4, 4000000, !dbg !234
  %56 = add i64 %55, 4000, !dbg !234
  %57 = add i64 %c2, 4000000, !dbg !237
  %58 = add i64 %57, 4000, !dbg !237
  %59 = add i64 %b3, 4000, !dbg !237
  %60 = add i64 %59, 4000000, !dbg !237
  %61 = add i64 %a4, 4000000, !dbg !237
  %62 = add i64 %61, 4000, !dbg !237
  %63 = add i64 %b3, 4000, !dbg !241
  %64 = add i64 %63, 4000000, !dbg !241
  %65 = add i64 %a4, 4000000, !dbg !241
  %66 = add i64 %65, 4000, !dbg !241
  %67 = add i64 %c2, 4000000, !dbg !237
  %68 = add i64 %67, 4000, !dbg !237
  %69 = add i64 %b3, 4000, !dbg !237
  %70 = add i64 %69, 4000000, !dbg !237
  %71 = add i64 %a4, 4000000, !dbg !237
  %72 = add i64 %71, 4000, !dbg !237
  %73 = add i64 %c2, 4000000, !dbg !237
  %74 = add i64 %73, 4000, !dbg !237
  %75 = add i64 %b3, 4000, !dbg !237
  %76 = add i64 %75, 4000000, !dbg !237
  %77 = add i64 %a4, 4000000, !dbg !237
  %78 = add i64 %77, 4000, !dbg !237
  %79 = add i64 %b3, 4000, !dbg !241
  %80 = add i64 %79, 4000000, !dbg !241
  %81 = add i64 %a4, 4000000, !dbg !241
  %82 = add i64 %81, 4000, !dbg !241
  %83 = add i64 %b3, 4000, !dbg !241
  %84 = add i64 %83, 4000000, !dbg !241
  %85 = add i64 %a4, 4000000, !dbg !241
  %86 = add i64 %85, 4000, !dbg !241
  br label %for.cond, !dbg !245

for.cond:                                         ; preds = %for.inc.20, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc21, %for.inc.20 ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !234
  br i1 %cmp, label %for.body, label %for.end.22, !dbg !246

for.body:                                         ; preds = %for.cond
  br label %for.cond.1, !dbg !247

for.cond.1:                                       ; preds = %for.inc.17, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc18, %for.inc.17 ]
  %cmp2 = icmp slt i32 %j.0, 1000, !dbg !237
  br i1 %cmp2, label %for.body.3, label %for.end.19, !dbg !248

for.body.3:                                       ; preds = %for.cond.1
  br label %for.cond.4, !dbg !249

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %k.0 = phi i32 [ 0, %for.body.3 ], [ %inc, %for.inc ]
  %sum.0 = phi float [ 0.000000e+00, %for.body.3 ], [ %add12, %for.inc ]
  %cmp5 = icmp slt i32 %k.0, 1000, !dbg !241
  br i1 %cmp5, label %for.body.6, label %for.end, !dbg !250

for.body.6:                                       ; preds = %for.cond.4
  %mul = mul nsw i32 %i.0, 1000, !dbg !251
  %add = add nsw i32 %mul, %k.0, !dbg !253
  %idxprom = sext i32 %add to i64, !dbg !254
  %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !254
  %tmp = load float, float* %arrayidx, align 4, !dbg !254
  %mul7 = mul nsw i32 %k.0, 1000, !dbg !255
  %add8 = add nsw i32 %mul7, %j.0, !dbg !256
  %idxprom9 = sext i32 %add8 to i64, !dbg !257
  %arrayidx10 = getelementptr inbounds float, float* %b, i64 %idxprom9, !dbg !257
  %tmp1 = load float, float* %arrayidx10, align 4, !dbg !257
  %mul11 = fmul float %tmp, %tmp1, !dbg !258
  %add12 = fadd float %sum.0, %mul11, !dbg !259
  br label %for.inc, !dbg !260

for.inc:                                          ; preds = %for.body.6
  %inc = add nsw i32 %k.0, 1, !dbg !261
  br label %for.cond.4, !dbg !262

for.end:                                          ; preds = %for.cond.4
  %sum.0.lcssa = phi float [ %sum.0, %for.cond.4 ]
  %mul13 = mul nsw i32 %i.0, 1000, !dbg !263
  %add14 = add nsw i32 %mul13, %j.0, !dbg !264
  %idxprom15 = sext i32 %add14 to i64, !dbg !265
  %arrayidx16 = getelementptr inbounds float, float* %c, i64 %idxprom15, !dbg !265
  store float %sum.0.lcssa, float* %arrayidx16, align 4, !dbg !266
  br label %for.inc.17, !dbg !267

for.inc.17:                                       ; preds = %for.end
  %inc18 = add nsw i32 %j.0, 1, !dbg !268
  br label %for.cond.1, !dbg !269

for.end.19:                                       ; preds = %for.cond.1
  br label %for.inc.20, !dbg !270

for.inc.20:                                       ; preds = %for.end.19
  %inc21 = add nsw i32 %i.0, 1, !dbg !271
  br label %for.cond, !dbg !272

for.end.22:                                       ; preds = %for.cond
  ret void, !dbg !273
}

; Function Attrs: nounwind uwtable
define void @compareResults(float* %b_cpu, float* %b_gpu) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !274, metadata !44), !dbg !275
  call void @llvm.dbg.value(metadata i32 %inc14, i64 0, metadata !276, metadata !44), !dbg !277
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !278, metadata !44), !dbg !279
  call void @llvm.dbg.value(metadata i32 %inc12, i64 0, metadata !274, metadata !44), !dbg !275
  call void @llvm.dbg.value(metadata float* %b_cpu, i64 0, metadata !280, metadata !44), !dbg !281
  call void @llvm.dbg.value(metadata float* %b_gpu, i64 0, metadata !282, metadata !44), !dbg !283
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !278, metadata !44), !dbg !279
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !276, metadata !44), !dbg !277
  %b_gpu3 = ptrtoint float* %b_gpu to i64
  %b_cpu2 = ptrtoint float* %b_cpu to i64
  %0 = ptrtoint float* undef to i64
  %1 = ptrtoint float* undef to i64
  %2 = ptrtoint float* undef to i64
  %3 = ptrtoint float* undef to i64
  %4 = ptrtoint float* undef to i64
  %5 = ptrtoint float* undef to i64
  %6 = ptrtoint float* undef to i64
  %7 = ptrtoint float* undef to i64
  %8 = ptrtoint float* undef to i64
  %9 = ptrtoint float* undef to i64
  %10 = ptrtoint float* undef to i64
  %11 = ptrtoint float* undef to i64
  %12 = ptrtoint float* undef to i64
  %13 = ptrtoint float* undef to i64
  %14 = ptrtoint float* undef to i64
  %15 = ptrtoint float* undef to i64
  %16 = add i64 %b_cpu2, 4000000, !dbg !284
  %17 = add i64 %16, 4000, !dbg !284
  %18 = add i64 %b_gpu3, 4000000, !dbg !284
  %19 = add i64 %18, 4000, !dbg !284
  %20 = add i64 %b_cpu2, 4000000, !dbg !284
  %21 = add i64 %20, 4000, !dbg !284
  %22 = add i64 %b_gpu3, 4000000, !dbg !284
  %23 = add i64 %22, 4000, !dbg !284
  %24 = add i64 %b_cpu2, 4000000, !dbg !287
  %25 = add i64 %24, 4000, !dbg !287
  %26 = add i64 %b_gpu3, 4000000, !dbg !287
  %27 = add i64 %26, 4000, !dbg !287
  %28 = add i64 %b_cpu2, 4000000, !dbg !284
  %29 = add i64 %28, 4000, !dbg !284
  %30 = add i64 %b_gpu3, 4000000, !dbg !284
  %31 = add i64 %30, 4000, !dbg !284
  %32 = add i64 %b_cpu2, 4000000, !dbg !284
  %33 = add i64 %32, 4000, !dbg !284
  %34 = add i64 %b_gpu3, 4000000, !dbg !284
  %35 = add i64 %34, 4000, !dbg !284
  %36 = add i64 %b_cpu2, 4000000, !dbg !291
  %37 = add i64 %36, 4000, !dbg !291
  %38 = add i64 %b_gpu3, 4000000, !dbg !291
  %39 = add i64 %38, 4000, !dbg !291
  %40 = add i64 %b_cpu2, 4000000, !dbg !291
  %41 = add i64 %40, 4000, !dbg !291
  %42 = add i64 %b_gpu3, 4000000, !dbg !291
  %43 = add i64 %42, 4000, !dbg !291
  %44 = add i64 %b_cpu2, 4000000, !dbg !287
  %45 = add i64 %44, 4000, !dbg !287
  %46 = add i64 %b_gpu3, 4000000, !dbg !287
  %47 = add i64 %46, 4000, !dbg !287
  %48 = add i64 %b_cpu2, 4000000, !dbg !287
  %49 = add i64 %48, 4000, !dbg !287
  %50 = add i64 %b_gpu3, 4000000, !dbg !287
  %51 = add i64 %50, 4000, !dbg !287
  br label %for.cond, !dbg !294

for.cond:                                         ; preds = %for.inc.13, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc14, %for.inc.13 ]
  %fail.0 = phi i32 [ 0, %entry ], [ %fail.1.lcssa, %for.inc.13 ]
  %cmp = icmp slt i32 %i.0, 1000, !dbg !284
  br i1 %cmp, label %for.body, label %for.end.15, !dbg !295

for.body:                                         ; preds = %for.cond
  br label %for.cond.1, !dbg !296

for.cond.1:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc12, %for.inc ]
  %fail.1 = phi i32 [ %fail.0, %for.body ], [ %fail.2, %for.inc ]
  %cmp2 = icmp slt i32 %j.0, 1000, !dbg !287
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !297

for.body.3:                                       ; preds = %for.cond.1
  %mul = mul nsw i32 %i.0, 1000, !dbg !291
  %add = add nsw i32 %mul, %j.0, !dbg !298
  %idxprom = sext i32 %add to i64, !dbg !299
  %arrayidx = getelementptr inbounds float, float* %b_cpu, i64 %idxprom, !dbg !299
  %tmp = load float, float* %arrayidx, align 4, !dbg !299
  %conv = fpext float %tmp to double, !dbg !299
  %mul4 = mul nsw i32 %i.0, 1000, !dbg !300
  %add5 = add nsw i32 %mul4, %j.0, !dbg !301
  %idxprom6 = sext i32 %add5 to i64, !dbg !302
  %arrayidx7 = getelementptr inbounds float, float* %b_gpu, i64 %idxprom6, !dbg !302
  %tmp1 = load float, float* %arrayidx7, align 4, !dbg !302
  %conv8 = fpext float %tmp1 to double, !dbg !302
  %call = call float @percentDiff(double %conv, double %conv8), !dbg !303
  %conv9 = fpext float %call to double, !dbg !303
  %cmp10 = fcmp ogt double %conv9, 1.000000e-02, !dbg !304
  br i1 %cmp10, label %if.then, label %if.end, !dbg !305

if.then:                                          ; preds = %for.body.3
  %inc = add nsw i32 %fail.1, 1, !dbg !306
  br label %if.end, !dbg !308

if.end:                                           ; preds = %if.then, %for.body.3
  %fail.2 = phi i32 [ %inc, %if.then ], [ %fail.1, %for.body.3 ]
  br label %for.inc, !dbg !309

for.inc:                                          ; preds = %if.end
  %inc12 = add nsw i32 %j.0, 1, !dbg !310
  br label %for.cond.1, !dbg !311

for.end:                                          ; preds = %for.cond.1
  %fail.1.lcssa = phi i32 [ %fail.1, %for.cond.1 ]
  br label %for.inc.13, !dbg !312

for.inc.13:                                       ; preds = %for.end
  %inc14 = add nsw i32 %i.0, 1, !dbg !313
  br label %for.cond, !dbg !314

for.end.15:                                       ; preds = %for.cond
  %fail.0.lcssa = phi i32 [ %fail.0, %for.cond ]
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.1, i32 0, i32 0), double 1.000000e-02, i32 %fail.0.lcssa), !dbg !315
  ret void, !dbg !316
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !317, metadata !44), !dbg !318
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !319, metadata !44), !dbg !320
  %call = call noalias i8* @malloc(i64 4000000) #4, !dbg !321
  %tmp = bitcast i8* %call to float*, !dbg !322
  call void @llvm.dbg.value(metadata float* %tmp, i64 0, metadata !323, metadata !44), !dbg !324
  %call1 = call noalias i8* @malloc(i64 4000000) #4, !dbg !325
  %tmp1 = bitcast i8* %call1 to float*, !dbg !326
  call void @llvm.dbg.value(metadata float* %tmp1, i64 0, metadata !327, metadata !44), !dbg !328
  %call2 = call noalias i8* @malloc(i64 4000000) #4, !dbg !329
  %tmp2 = bitcast i8* %call2 to float*, !dbg !330
  call void @llvm.dbg.value(metadata float* %tmp2, i64 0, metadata !331, metadata !44), !dbg !332
  %call3 = call noalias i8* @malloc(i64 4000000) #4, !dbg !333
  %tmp3 = bitcast i8* %call3 to float*, !dbg !334
  call void @llvm.dbg.value(metadata float* %tmp3, i64 0, metadata !335, metadata !44), !dbg !336
  call void @init(float* %tmp, float* %tmp1, float* %tmp2, float* %tmp3), !dbg !337
  %tmp4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !338
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i32 0, i32 0)), !dbg !339
  %call5 = call double @rtclock(), !dbg !340
  call void @llvm.dbg.value(metadata double %call5, i64 0, metadata !341, metadata !44), !dbg !342
  call void @mul_GPU(float* %tmp, float* %tmp1, float* %tmp3), !dbg !343
  %call6 = call double @rtclock(), !dbg !344
  call void @llvm.dbg.value(metadata double %call6, i64 0, metadata !345, metadata !44), !dbg !346
  %tmp5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !347
  %sub = fsub double %call6, %call5, !dbg !348
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp5, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), double %sub), !dbg !349
  %call8 = call double @rtclock(), !dbg !350
  call void @llvm.dbg.value(metadata double %call8, i64 0, metadata !341, metadata !44), !dbg !342
  call void @mul_CPU(float* %tmp, float* %tmp1, float* %tmp2), !dbg !351
  %call9 = call double @rtclock(), !dbg !352
  call void @llvm.dbg.value(metadata double %call9, i64 0, metadata !345, metadata !44), !dbg !346
  %tmp6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !353
  %sub10 = fsub double %call9, %call8, !dbg !354
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i32 0, i32 0), double %sub10), !dbg !355
  call void @compareResults(float* %tmp2, float* %tmp3), !dbg !356
  %tmp7 = bitcast float* %tmp to i8*, !dbg !357
  call void @free(i8* %tmp7) #4, !dbg !358
  %tmp8 = bitcast float* %tmp1 to i8*, !dbg !359
  call void @free(i8* %tmp8) #4, !dbg !360
  %tmp9 = bitcast float* %tmp2 to i8*, !dbg !361
  call void @free(i8* %tmp9) #4, !dbg !362
  %tmp10 = bitcast float* %tmp3 to i8*, !dbg !363
  call void @free(i8* %tmp10) #4, !dbg !364
  ret i32 0, !dbg !365
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!35, !36}
!llvm.ident = !{!37}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/UniBench/benchmarks//mgBench/mat-mul/src/mat-mul_gpu.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!2 = !{}
!3 = !{!4, !5}
!4 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!6 = !{!7, !12, !15, !18, !21, !24, !25, !28}
!7 = !DISubprogram(name: "rtclock", scope: !8, file: !8, line: 7, type: !9, isLocal: false, isDefinition: true, scopeLine: 8, isOptimized: false, function: double ()* @rtclock, variables: !2)
!8 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/UniBench/benchmarks//mgBench/mat-mul/src/../../common/mgbenchUtilFunctions.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!9 = !DISubroutineType(types: !10)
!10 = !{!11}
!11 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!12 = !DISubprogram(name: "absVal", scope: !8, file: !8, line: 18, type: !13, isLocal: false, isDefinition: true, scopeLine: 19, flags: DIFlagPrototyped, isOptimized: false, function: float (float)* @absVal, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{!4, !4}
!15 = !DISubprogram(name: "percentDiff", scope: !8, file: !8, line: 32, type: !16, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, function: float (double, double)* @percentDiff, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{!4, !11, !11}
!18 = !DISubprogram(name: "init", scope: !1, file: !1, line: 27, type: !19, isLocal: false, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*, float*, float*)* @init, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{null, !5, !5, !5, !5}
!21 = !DISubprogram(name: "mul_GPU", scope: !1, file: !1, line: 44, type: !22, isLocal: false, isDefinition: true, scopeLine: 45, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*, float*)* @mul_GPU, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{null, !5, !5, !5}
!24 = !DISubprogram(name: "mul_CPU", scope: !1, file: !1, line: 70, type: !22, isLocal: false, isDefinition: true, scopeLine: 71, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*, float*)* @mul_CPU, variables: !2)
!25 = !DISubprogram(name: "compareResults", scope: !1, file: !1, line: 91, type: !26, isLocal: false, isDefinition: true, scopeLine: 92, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, float*)* @compareResults, variables: !2)
!26 = !DISubroutineType(types: !27)
!27 = !{null, !5, !5}
!28 = !DISubprogram(name: "main", scope: !1, file: !1, line: 112, type: !29, isLocal: false, isDefinition: true, scopeLine: 112, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!29 = !DISubroutineType(types: !30)
!30 = !{!31, !31, !32}
!31 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !34, size: 64, align: 64)
!34 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!35 = !{i32 2, !"Dwarf Version", i32 4}
!36 = !{i32 2, !"Debug Info Version", i32 3}
!37 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!38 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Tzp", scope: !7, file: !8, line: 9, type: !39)
!39 = !DICompositeType(tag: DW_TAG_structure_type, name: "timezone", file: !40, line: 57, size: 64, align: 32, elements: !41)
!40 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/time.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!41 = !{!42, !43}
!42 = !DIDerivedType(tag: DW_TAG_member, name: "tz_minuteswest", scope: !39, file: !40, line: 59, baseType: !31, size: 32, align: 32)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "tz_dsttime", scope: !39, file: !40, line: 60, baseType: !31, size: 32, align: 32, offset: 32)
!44 = !DIExpression()
!45 = !DILocation(line: 9, column: 21, scope: !7)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Tp", scope: !7, file: !8, line: 10, type: !47)
!47 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !48, line: 31, size: 128, align: 64, elements: !49)
!48 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!49 = !{!50, !54}
!50 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !47, file: !48, line: 33, baseType: !51, size: 64, align: 64)
!51 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !52, line: 149, baseType: !53)
!52 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!53 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!54 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !47, file: !48, line: 34, baseType: !55, size: 64, align: 64, offset: 64)
!55 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !52, line: 151, baseType: !53)
!56 = !DILocation(line: 10, column: 20, scope: !7)
!57 = !DILocation(line: 12, column: 12, scope: !7)
!58 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "stat", scope: !7, file: !8, line: 11, type: !31)
!59 = !DILocation(line: 11, column: 9, scope: !7)
!60 = !DILocation(line: 13, column: 14, scope: !61)
!61 = distinct !DILexicalBlock(scope: !7, file: !8, line: 13, column: 9)
!62 = !DILocation(line: 13, column: 9, scope: !7)
!63 = !DILocation(line: 13, column: 20, scope: !61)
!64 = !DILocation(line: 14, column: 15, scope: !7)
!65 = !DILocation(line: 14, column: 12, scope: !7)
!66 = !DILocation(line: 14, column: 27, scope: !7)
!67 = !DILocation(line: 14, column: 24, scope: !7)
!68 = !DILocation(line: 14, column: 34, scope: !7)
!69 = !DILocation(line: 14, column: 22, scope: !7)
!70 = !DILocation(line: 14, column: 5, scope: !7)
!71 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !12, file: !8, line: 18, type: !4)
!72 = !DILocation(line: 18, column: 20, scope: !12)
!73 = !DILocation(line: 20, column: 7, scope: !74)
!74 = distinct !DILexicalBlock(scope: !12, file: !8, line: 20, column: 5)
!75 = !DILocation(line: 20, column: 5, scope: !12)
!76 = !DILocation(line: 22, column: 13, scope: !77)
!77 = distinct !DILexicalBlock(scope: !74, file: !8, line: 21, column: 2)
!78 = !DILocation(line: 22, column: 3, scope: !77)
!79 = !DILocation(line: 26, column: 3, scope: !80)
!80 = distinct !DILexicalBlock(scope: !74, file: !8, line: 25, column: 2)
!81 = !DILocation(line: 28, column: 1, scope: !12)
!82 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "val1", arg: 1, scope: !15, file: !8, line: 32, type: !11)
!83 = !DILocation(line: 32, column: 26, scope: !15)
!84 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "val2", arg: 2, scope: !15, file: !8, line: 32, type: !11)
!85 = !DILocation(line: 32, column: 39, scope: !15)
!86 = !DILocation(line: 34, column: 14, scope: !87)
!87 = distinct !DILexicalBlock(scope: !15, file: !8, line: 34, column: 6)
!88 = !DILocation(line: 34, column: 7, scope: !87)
!89 = !DILocation(line: 34, column: 20, scope: !87)
!90 = !DILocation(line: 34, column: 28, scope: !87)
!91 = !DILocation(line: 34, column: 39, scope: !92)
!92 = !DILexicalBlockFile(scope: !87, file: !8, discriminator: 1)
!93 = !DILocation(line: 34, column: 32, scope: !87)
!94 = !DILocation(line: 34, column: 45, scope: !87)
!95 = !DILocation(line: 34, column: 6, scope: !15)
!96 = !DILocation(line: 36, column: 3, scope: !97)
!97 = distinct !DILexicalBlock(scope: !87, file: !8, line: 35, column: 2)
!98 = !DILocation(line: 41, column: 43, scope: !99)
!99 = distinct !DILexicalBlock(scope: !87, file: !8, line: 40, column: 2)
!100 = !DILocation(line: 41, column: 38, scope: !99)
!101 = !DILocation(line: 41, column: 31, scope: !99)
!102 = !DILocation(line: 41, column: 65, scope: !99)
!103 = !DILocation(line: 41, column: 60, scope: !99)
!104 = !DILocation(line: 41, column: 53, scope: !99)
!105 = !DILocation(line: 41, column: 51, scope: !99)
!106 = !DILocation(line: 41, column: 24, scope: !99)
!107 = !DILocation(line: 41, column: 21, scope: !99)
!108 = !DILocation(line: 41, column: 7, scope: !99)
!109 = !DILocation(line: 43, column: 1, scope: !15)
!110 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !18, file: !1, line: 29, type: !31)
!111 = !DILocation(line: 29, column: 12, scope: !18)
!112 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !18, file: !1, line: 29, type: !31)
!113 = !DILocation(line: 29, column: 9, scope: !18)
!114 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !18, file: !1, line: 27, type: !5)
!115 = !DILocation(line: 27, column: 18, scope: !18)
!116 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !18, file: !1, line: 27, type: !5)
!117 = !DILocation(line: 27, column: 28, scope: !18)
!118 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c_cpu", arg: 3, scope: !18, file: !1, line: 27, type: !5)
!119 = !DILocation(line: 27, column: 38, scope: !18)
!120 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c_gpu", arg: 4, scope: !18, file: !1, line: 27, type: !5)
!121 = !DILocation(line: 27, column: 52, scope: !18)
!122 = !DILocation(line: 30, column: 19, scope: !123)
!123 = distinct !DILexicalBlock(scope: !124, file: !1, line: 30, column: 5)
!124 = distinct !DILexicalBlock(scope: !18, file: !1, line: 30, column: 5)
!125 = !DILocation(line: 32, column: 16, scope: !126)
!126 = distinct !DILexicalBlock(scope: !127, file: !1, line: 32, column: 2)
!127 = distinct !DILexicalBlock(scope: !128, file: !1, line: 32, column: 2)
!128 = distinct !DILexicalBlock(scope: !123, file: !1, line: 31, column: 5)
!129 = !DILocation(line: 30, column: 10, scope: !124)
!130 = !DILocation(line: 30, column: 5, scope: !124)
!131 = !DILocation(line: 32, column: 7, scope: !127)
!132 = !DILocation(line: 32, column: 2, scope: !127)
!133 = !DILocation(line: 34, column: 28, scope: !134)
!134 = distinct !DILexicalBlock(scope: !126, file: !1, line: 33, column: 2)
!135 = !DILocation(line: 34, column: 41, scope: !134)
!136 = !DILocation(line: 34, column: 39, scope: !134)
!137 = !DILocation(line: 34, column: 37, scope: !134)
!138 = !DILocation(line: 34, column: 14, scope: !134)
!139 = !DILocation(line: 34, column: 21, scope: !134)
!140 = !DILocation(line: 34, column: 10, scope: !134)
!141 = !DILocation(line: 34, column: 26, scope: !134)
!142 = !DILocation(line: 35, column: 24, scope: !134)
!143 = !DILocation(line: 35, column: 37, scope: !134)
!144 = !DILocation(line: 35, column: 35, scope: !134)
!145 = !DILocation(line: 35, column: 33, scope: !134)
!146 = !DILocation(line: 35, column: 10, scope: !134)
!147 = !DILocation(line: 35, column: 17, scope: !134)
!148 = !DILocation(line: 35, column: 6, scope: !134)
!149 = !DILocation(line: 35, column: 22, scope: !134)
!150 = !DILocation(line: 36, column: 14, scope: !134)
!151 = !DILocation(line: 36, column: 21, scope: !134)
!152 = !DILocation(line: 36, column: 6, scope: !134)
!153 = !DILocation(line: 36, column: 26, scope: !134)
!154 = !DILocation(line: 37, column: 14, scope: !134)
!155 = !DILocation(line: 37, column: 21, scope: !134)
!156 = !DILocation(line: 37, column: 6, scope: !134)
!157 = !DILocation(line: 37, column: 26, scope: !134)
!158 = !DILocation(line: 38, column: 2, scope: !134)
!159 = !DILocation(line: 32, column: 24, scope: !126)
!160 = !DILocation(line: 32, column: 2, scope: !126)
!161 = !DILocation(line: 39, column: 5, scope: !128)
!162 = !DILocation(line: 30, column: 27, scope: !123)
!163 = !DILocation(line: 30, column: 5, scope: !123)
!164 = !DILocation(line: 40, column: 1, scope: !18)
!165 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !21, file: !1, line: 46, type: !31)
!166 = !DILocation(line: 46, column: 12, scope: !21)
!167 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !21, file: !1, line: 46, type: !31)
!168 = !DILocation(line: 46, column: 9, scope: !21)
!169 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum", scope: !21, file: !1, line: 48, type: !4)
!170 = !DILocation(line: 48, column: 11, scope: !21)
!171 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !21, file: !1, line: 46, type: !31)
!172 = !DILocation(line: 46, column: 15, scope: !21)
!173 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !21, file: !1, line: 44, type: !5)
!174 = !DILocation(line: 44, column: 21, scope: !21)
!175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !21, file: !1, line: 44, type: !5)
!176 = !DILocation(line: 44, column: 31, scope: !21)
!177 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c", arg: 3, scope: !21, file: !1, line: 44, type: !5)
!178 = !DILocation(line: 44, column: 41, scope: !21)
!179 = !DILocation(line: 54, column: 16, scope: !180)
!180 = distinct !DILexicalBlock(scope: !181, file: !1, line: 54, column: 2)
!181 = distinct !DILexicalBlock(scope: !182, file: !1, line: 54, column: 2)
!182 = distinct !DILexicalBlock(scope: !21, file: !1, line: 52, column: 5)
!183 = !DILocation(line: 56, column: 20, scope: !184)
!184 = distinct !DILexicalBlock(scope: !185, file: !1, line: 56, column: 6)
!185 = distinct !DILexicalBlock(scope: !186, file: !1, line: 56, column: 6)
!186 = distinct !DILexicalBlock(scope: !180, file: !1, line: 55, column: 2)
!187 = !DILocation(line: 59, column: 17, scope: !188)
!188 = distinct !DILexicalBlock(scope: !189, file: !1, line: 59, column: 3)
!189 = distinct !DILexicalBlock(scope: !190, file: !1, line: 59, column: 3)
!190 = distinct !DILexicalBlock(scope: !184, file: !1, line: 57, column: 6)
!191 = !DILocation(line: 54, column: 7, scope: !181)
!192 = !DILocation(line: 54, column: 2, scope: !181)
!193 = !DILocation(line: 56, column: 11, scope: !185)
!194 = !DILocation(line: 56, column: 6, scope: !185)
!195 = !DILocation(line: 59, column: 8, scope: !189)
!196 = !DILocation(line: 59, column: 3, scope: !189)
!197 = !DILocation(line: 61, column: 27, scope: !198)
!198 = distinct !DILexicalBlock(scope: !188, file: !1, line: 60, column: 3)
!199 = !DILocation(line: 61, column: 34, scope: !198)
!200 = !DILocation(line: 61, column: 23, scope: !198)
!201 = !DILocation(line: 61, column: 45, scope: !198)
!202 = !DILocation(line: 61, column: 52, scope: !198)
!203 = !DILocation(line: 61, column: 41, scope: !198)
!204 = !DILocation(line: 61, column: 39, scope: !198)
!205 = !DILocation(line: 61, column: 21, scope: !198)
!206 = !DILocation(line: 62, column: 3, scope: !198)
!207 = !DILocation(line: 59, column: 25, scope: !188)
!208 = !DILocation(line: 59, column: 3, scope: !188)
!209 = !DILocation(line: 63, column: 7, scope: !190)
!210 = !DILocation(line: 63, column: 14, scope: !190)
!211 = !DILocation(line: 63, column: 3, scope: !190)
!212 = !DILocation(line: 63, column: 19, scope: !190)
!213 = !DILocation(line: 64, column: 6, scope: !190)
!214 = !DILocation(line: 56, column: 28, scope: !184)
!215 = !DILocation(line: 56, column: 6, scope: !184)
!216 = !DILocation(line: 65, column: 2, scope: !186)
!217 = !DILocation(line: 54, column: 24, scope: !180)
!218 = !DILocation(line: 54, column: 2, scope: !180)
!219 = !DILocation(line: 68, column: 1, scope: !21)
!220 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum", scope: !24, file: !1, line: 74, type: !4)
!221 = !DILocation(line: 74, column: 11, scope: !24)
!222 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !24, file: !1, line: 73, type: !31)
!223 = !DILocation(line: 73, column: 13, scope: !24)
!224 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !24, file: !1, line: 73, type: !31)
!225 = !DILocation(line: 73, column: 11, scope: !24)
!226 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !24, file: !1, line: 73, type: !31)
!227 = !DILocation(line: 73, column: 9, scope: !24)
!228 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !24, file: !1, line: 70, type: !5)
!229 = !DILocation(line: 70, column: 21, scope: !24)
!230 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !24, file: !1, line: 70, type: !5)
!231 = !DILocation(line: 70, column: 31, scope: !24)
!232 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c", arg: 3, scope: !24, file: !1, line: 70, type: !5)
!233 = !DILocation(line: 70, column: 41, scope: !24)
!234 = !DILocation(line: 76, column: 19, scope: !235)
!235 = distinct !DILexicalBlock(scope: !236, file: !1, line: 76, column: 5)
!236 = distinct !DILexicalBlock(scope: !24, file: !1, line: 76, column: 5)
!237 = !DILocation(line: 78, column: 16, scope: !238)
!238 = distinct !DILexicalBlock(scope: !239, file: !1, line: 78, column: 2)
!239 = distinct !DILexicalBlock(scope: !240, file: !1, line: 78, column: 2)
!240 = distinct !DILexicalBlock(scope: !235, file: !1, line: 77, column: 5)
!241 = !DILocation(line: 81, column: 20, scope: !242)
!242 = distinct !DILexicalBlock(scope: !243, file: !1, line: 81, column: 6)
!243 = distinct !DILexicalBlock(scope: !244, file: !1, line: 81, column: 6)
!244 = distinct !DILexicalBlock(scope: !238, file: !1, line: 79, column: 2)
!245 = !DILocation(line: 76, column: 10, scope: !236)
!246 = !DILocation(line: 76, column: 5, scope: !236)
!247 = !DILocation(line: 78, column: 7, scope: !239)
!248 = !DILocation(line: 78, column: 2, scope: !239)
!249 = !DILocation(line: 81, column: 11, scope: !243)
!250 = !DILocation(line: 81, column: 6, scope: !243)
!251 = !DILocation(line: 83, column: 19, scope: !252)
!252 = distinct !DILexicalBlock(scope: !242, file: !1, line: 82, column: 6)
!253 = !DILocation(line: 83, column: 26, scope: !252)
!254 = !DILocation(line: 83, column: 15, scope: !252)
!255 = !DILocation(line: 83, column: 37, scope: !252)
!256 = !DILocation(line: 83, column: 44, scope: !252)
!257 = !DILocation(line: 83, column: 33, scope: !252)
!258 = !DILocation(line: 83, column: 31, scope: !252)
!259 = !DILocation(line: 83, column: 13, scope: !252)
!260 = !DILocation(line: 84, column: 6, scope: !252)
!261 = !DILocation(line: 81, column: 28, scope: !242)
!262 = !DILocation(line: 81, column: 6, scope: !242)
!263 = !DILocation(line: 85, column: 10, scope: !244)
!264 = !DILocation(line: 85, column: 17, scope: !244)
!265 = !DILocation(line: 85, column: 6, scope: !244)
!266 = !DILocation(line: 85, column: 22, scope: !244)
!267 = !DILocation(line: 86, column: 9, scope: !244)
!268 = !DILocation(line: 78, column: 24, scope: !238)
!269 = !DILocation(line: 78, column: 2, scope: !238)
!270 = !DILocation(line: 87, column: 5, scope: !240)
!271 = !DILocation(line: 76, column: 27, scope: !235)
!272 = !DILocation(line: 76, column: 5, scope: !235)
!273 = !DILocation(line: 88, column: 1, scope: !24)
!274 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !25, file: !1, line: 93, type: !31)
!275 = !DILocation(line: 93, column: 10, scope: !25)
!276 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !25, file: !1, line: 93, type: !31)
!277 = !DILocation(line: 93, column: 7, scope: !25)
!278 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fail", scope: !25, file: !1, line: 93, type: !31)
!279 = !DILocation(line: 93, column: 13, scope: !25)
!280 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b_cpu", arg: 1, scope: !25, file: !1, line: 91, type: !5)
!281 = !DILocation(line: 91, column: 28, scope: !25)
!282 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b_gpu", arg: 2, scope: !25, file: !1, line: 91, type: !5)
!283 = !DILocation(line: 91, column: 42, scope: !25)
!284 = !DILocation(line: 96, column: 15, scope: !285)
!285 = distinct !DILexicalBlock(scope: !286, file: !1, line: 96, column: 3)
!286 = distinct !DILexicalBlock(scope: !25, file: !1, line: 96, column: 3)
!287 = !DILocation(line: 98, column: 19, scope: !288)
!288 = distinct !DILexicalBlock(scope: !289, file: !1, line: 98, column: 7)
!289 = distinct !DILexicalBlock(scope: !290, file: !1, line: 98, column: 7)
!290 = distinct !DILexicalBlock(scope: !285, file: !1, line: 97, column: 3)
!291 = !DILocation(line: 100, column: 27, scope: !292)
!292 = distinct !DILexicalBlock(scope: !293, file: !1, line: 100, column: 8)
!293 = distinct !DILexicalBlock(scope: !288, file: !1, line: 99, column: 7)
!294 = !DILocation(line: 96, column: 8, scope: !286)
!295 = !DILocation(line: 96, column: 3, scope: !286)
!296 = !DILocation(line: 98, column: 12, scope: !289)
!297 = !DILocation(line: 98, column: 7, scope: !289)
!298 = !DILocation(line: 100, column: 33, scope: !292)
!299 = !DILocation(line: 100, column: 20, scope: !292)
!300 = !DILocation(line: 100, column: 46, scope: !292)
!301 = !DILocation(line: 100, column: 52, scope: !292)
!302 = !DILocation(line: 100, column: 39, scope: !292)
!303 = !DILocation(line: 100, column: 8, scope: !292)
!304 = !DILocation(line: 100, column: 58, scope: !292)
!305 = !DILocation(line: 100, column: 8, scope: !293)
!306 = !DILocation(line: 102, column: 12, scope: !307)
!307 = distinct !DILexicalBlock(scope: !292, file: !1, line: 101, column: 4)
!308 = !DILocation(line: 103, column: 4, scope: !307)
!309 = !DILocation(line: 104, column: 7, scope: !293)
!310 = !DILocation(line: 98, column: 28, scope: !288)
!311 = !DILocation(line: 98, column: 7, scope: !288)
!312 = !DILocation(line: 105, column: 4, scope: !290)
!313 = !DILocation(line: 96, column: 24, scope: !285)
!314 = !DILocation(line: 96, column: 3, scope: !285)
!315 = !DILocation(line: 108, column: 3, scope: !25)
!316 = !DILocation(line: 109, column: 1, scope: !25)
!317 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !28, file: !1, line: 112, type: !31)
!318 = !DILocation(line: 112, column: 14, scope: !28)
!319 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !28, file: !1, line: 112, type: !32)
!320 = !DILocation(line: 112, column: 26, scope: !28)
!321 = !DILocation(line: 117, column: 19, scope: !28)
!322 = !DILocation(line: 117, column: 9, scope: !28)
!323 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !28, file: !1, line: 115, type: !5)
!324 = !DILocation(line: 115, column: 12, scope: !28)
!325 = !DILocation(line: 118, column: 19, scope: !28)
!326 = !DILocation(line: 118, column: 9, scope: !28)
!327 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !28, file: !1, line: 115, type: !5)
!328 = !DILocation(line: 115, column: 16, scope: !28)
!329 = !DILocation(line: 119, column: 23, scope: !28)
!330 = !DILocation(line: 119, column: 13, scope: !28)
!331 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c_cpu", scope: !28, file: !1, line: 115, type: !5)
!332 = !DILocation(line: 115, column: 20, scope: !28)
!333 = !DILocation(line: 120, column: 23, scope: !28)
!334 = !DILocation(line: 120, column: 13, scope: !28)
!335 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c_gpu", scope: !28, file: !1, line: 115, type: !5)
!336 = !DILocation(line: 115, column: 28, scope: !28)
!337 = !DILocation(line: 122, column: 5, scope: !28)
!338 = !DILocation(line: 124, column: 13, scope: !28)
!339 = !DILocation(line: 124, column: 5, scope: !28)
!340 = !DILocation(line: 126, column: 15, scope: !28)
!341 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t_start", scope: !28, file: !1, line: 114, type: !11)
!342 = !DILocation(line: 114, column: 12, scope: !28)
!343 = !DILocation(line: 127, column: 5, scope: !28)
!344 = !DILocation(line: 128, column: 13, scope: !28)
!345 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t_end", scope: !28, file: !1, line: 114, type: !11)
!346 = !DILocation(line: 114, column: 21, scope: !28)
!347 = !DILocation(line: 129, column: 13, scope: !28)
!348 = !DILocation(line: 129, column: 53, scope: !28)
!349 = !DILocation(line: 129, column: 5, scope: !28)
!350 = !DILocation(line: 131, column: 15, scope: !28)
!351 = !DILocation(line: 132, column: 5, scope: !28)
!352 = !DILocation(line: 133, column: 13, scope: !28)
!353 = !DILocation(line: 134, column: 13, scope: !28)
!354 = !DILocation(line: 134, column: 53, scope: !28)
!355 = !DILocation(line: 134, column: 5, scope: !28)
!356 = !DILocation(line: 136, column: 5, scope: !28)
!357 = !DILocation(line: 138, column: 10, scope: !28)
!358 = !DILocation(line: 138, column: 5, scope: !28)
!359 = !DILocation(line: 139, column: 10, scope: !28)
!360 = !DILocation(line: 139, column: 5, scope: !28)
!361 = !DILocation(line: 140, column: 10, scope: !28)
!362 = !DILocation(line: 140, column: 5, scope: !28)
!363 = !DILocation(line: 141, column: 10, scope: !28)
!364 = !DILocation(line: 141, column: 5, scope: !28)
!365 = !DILocation(line: 143, column: 5, scope: !28)
