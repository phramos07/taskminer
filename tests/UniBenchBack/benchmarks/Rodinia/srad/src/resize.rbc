; ModuleID = '/home/gleison/lge/dawn-3.7/UniBench/benchmarks//Rodinia/srad/src/resize.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @resize(float* %input, i32 %input_rows, i32 %input_cols, float* %output, float* %output_cpu, i32 %output_rows, i32 %output_cols, i32 %major) #0 {
entry:
  call void @llvm.dbg.value(metadata float* %input, i64 0, metadata !13, metadata !14), !dbg !15
  call void @llvm.dbg.value(metadata i32 %input_rows, i64 0, metadata !16, metadata !14), !dbg !17
  call void @llvm.dbg.value(metadata i32 %input_cols, i64 0, metadata !18, metadata !14), !dbg !19
  call void @llvm.dbg.value(metadata float* %output, i64 0, metadata !20, metadata !14), !dbg !21
  call void @llvm.dbg.value(metadata float* %output_cpu, i64 0, metadata !22, metadata !14), !dbg !23
  call void @llvm.dbg.value(metadata i32 %output_rows, i64 0, metadata !24, metadata !14), !dbg !25
  call void @llvm.dbg.value(metadata i32 %output_cols, i64 0, metadata !26, metadata !14), !dbg !27
  call void @llvm.dbg.value(metadata i32 %major, i64 0, metadata !28, metadata !14), !dbg !29
  %cmp = icmp eq i32 %major, 0, !dbg !30
  br i1 %cmp, label %if.then, label %if.else, !dbg !32

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 %sub, i64 0, metadata !33, metadata !14), !dbg !34
  call void @llvm.dbg.value(metadata i32 %sub9, i64 0, metadata !35, metadata !14), !dbg !36
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !37, metadata !14), !dbg !38
  call void @llvm.dbg.value(metadata i32 %inc23, i64 0, metadata !35, metadata !14), !dbg !36
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !37, metadata !14), !dbg !38
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !35, metadata !14), !dbg !36
  call void @llvm.dbg.value(metadata i32 %inc25, i64 0, metadata !39, metadata !14), !dbg !40
  call void @llvm.dbg.value(metadata i32 %inc26, i64 0, metadata !33, metadata !14), !dbg !34
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !39, metadata !14), !dbg !40
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !33, metadata !14), !dbg !34
  br label %for.cond, !dbg !41

for.cond:                                         ; preds = %for.inc.24, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc25, %for.inc.24 ]
  %i2.0 = phi i32 [ 0, %if.then ], [ %inc26, %for.inc.24 ]
  %cmp1 = icmp slt i32 %i.0, %output_rows, !dbg !44
  br i1 %cmp1, label %for.body, label %for.end.27, !dbg !46

for.body:                                         ; preds = %for.cond
  %cmp2 = icmp sge i32 %i2.0, %input_rows, !dbg !47
  br i1 %cmp2, label %if.then.3, label %if.end, !dbg !50

if.then.3:                                        ; preds = %for.body
  %sub = sub nsw i32 %i2.0, %input_rows, !dbg !51
  br label %if.end, !dbg !53

if.end:                                           ; preds = %if.then.3, %for.body
  %i2.1 = phi i32 [ %sub, %if.then.3 ], [ %i2.0, %for.body ]
  br label %for.cond.4, !dbg !54

for.cond.4:                                       ; preds = %for.inc, %if.end
  %j.0 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ]
  %j2.0 = phi i32 [ 0, %if.end ], [ %inc23, %for.inc ]
  %cmp5 = icmp slt i32 %j.0, %output_cols, !dbg !56
  br i1 %cmp5, label %for.body.6, label %for.end, !dbg !58

for.body.6:                                       ; preds = %for.cond.4
  %cmp7 = icmp sge i32 %j2.0, %input_cols, !dbg !59
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !62

if.then.8:                                        ; preds = %for.body.6
  %sub9 = sub nsw i32 %j2.0, %input_cols, !dbg !63
  br label %if.end.10, !dbg !65

if.end.10:                                        ; preds = %if.then.8, %for.body.6
  %j2.1 = phi i32 [ %sub9, %if.then.8 ], [ %j2.0, %for.body.6 ]
  %mul = mul nsw i32 %i2.1, %input_cols, !dbg !66
  %add = add nsw i32 %mul, %j2.1, !dbg !67
  %idxprom = sext i32 %add to i64, !dbg !68
  %arrayidx = getelementptr inbounds float, float* %input, i64 %idxprom, !dbg !68
  %tmp = load float, float* %arrayidx, align 4, !dbg !68
  %mul11 = mul nsw i32 %i.0, %output_cols, !dbg !69
  %add12 = add nsw i32 %mul11, %j.0, !dbg !70
  %idxprom13 = sext i32 %add12 to i64, !dbg !71
  %arrayidx14 = getelementptr inbounds float, float* %output, i64 %idxprom13, !dbg !71
  store float %tmp, float* %arrayidx14, align 4, !dbg !72
  %mul15 = mul nsw i32 %i2.1, %input_cols, !dbg !73
  %add16 = add nsw i32 %mul15, %j2.1, !dbg !74
  %idxprom17 = sext i32 %add16 to i64, !dbg !75
  %arrayidx18 = getelementptr inbounds float, float* %input, i64 %idxprom17, !dbg !75
  %tmp1 = load float, float* %arrayidx18, align 4, !dbg !75
  %mul19 = mul nsw i32 %i.0, %output_cols, !dbg !76
  %add20 = add nsw i32 %mul19, %j.0, !dbg !77
  %idxprom21 = sext i32 %add20 to i64, !dbg !78
  %arrayidx22 = getelementptr inbounds float, float* %output_cpu, i64 %idxprom21, !dbg !78
  store float %tmp1, float* %arrayidx22, align 4, !dbg !79
  br label %for.inc, !dbg !80

for.inc:                                          ; preds = %if.end.10
  %inc = add nsw i32 %j.0, 1, !dbg !81
  %inc23 = add nsw i32 %j2.1, 1, !dbg !82
  br label %for.cond.4, !dbg !83

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.24, !dbg !84

for.inc.24:                                       ; preds = %for.end
  %inc25 = add nsw i32 %i.0, 1, !dbg !85
  %inc26 = add nsw i32 %i2.1, 1, !dbg !86
  br label %for.cond, !dbg !87

for.end.27:                                       ; preds = %for.cond
  br label %if.end.66, !dbg !88

if.else:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 %sub33, i64 0, metadata !35, metadata !14), !dbg !36
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !39, metadata !14), !dbg !40
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !33, metadata !14), !dbg !34
  call void @llvm.dbg.value(metadata i32 %inc63, i64 0, metadata !37, metadata !14), !dbg !38
  call void @llvm.dbg.value(metadata i32 %inc64, i64 0, metadata !35, metadata !14), !dbg !36
  call void @llvm.dbg.value(metadata i32 %sub40, i64 0, metadata !33, metadata !14), !dbg !34
  call void @llvm.dbg.value(metadata i32 %inc59, i64 0, metadata !39, metadata !14), !dbg !40
  call void @llvm.dbg.value(metadata i32 %inc60, i64 0, metadata !33, metadata !14), !dbg !34
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !37, metadata !14), !dbg !38
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !35, metadata !14), !dbg !36
  br label %for.cond.28, !dbg !89

for.cond.28:                                      ; preds = %for.inc.62, %if.else
  %j.1 = phi i32 [ 0, %if.else ], [ %inc63, %for.inc.62 ]
  %j2.2 = phi i32 [ 0, %if.else ], [ %inc64, %for.inc.62 ]
  %cmp29 = icmp slt i32 %j.1, %output_cols, !dbg !92
  br i1 %cmp29, label %for.body.30, label %for.end.65, !dbg !94

for.body.30:                                      ; preds = %for.cond.28
  %cmp31 = icmp sge i32 %j2.2, %input_cols, !dbg !95
  br i1 %cmp31, label %if.then.32, label %if.end.34, !dbg !98

if.then.32:                                       ; preds = %for.body.30
  %sub33 = sub nsw i32 %j2.2, %input_cols, !dbg !99
  br label %if.end.34, !dbg !101

if.end.34:                                        ; preds = %if.then.32, %for.body.30
  %j2.3 = phi i32 [ %sub33, %if.then.32 ], [ %j2.2, %for.body.30 ]
  br label %for.cond.35, !dbg !102

for.cond.35:                                      ; preds = %for.inc.58, %if.end.34
  %i.1 = phi i32 [ 0, %if.end.34 ], [ %inc59, %for.inc.58 ]
  %i2.2 = phi i32 [ 0, %if.end.34 ], [ %inc60, %for.inc.58 ]
  %cmp36 = icmp slt i32 %i.1, %output_rows, !dbg !104
  br i1 %cmp36, label %for.body.37, label %for.end.61, !dbg !106

for.body.37:                                      ; preds = %for.cond.35
  %cmp38 = icmp sge i32 %i2.2, %input_rows, !dbg !107
  br i1 %cmp38, label %if.then.39, label %if.end.41, !dbg !110

if.then.39:                                       ; preds = %for.body.37
  %sub40 = sub nsw i32 %i2.2, %input_rows, !dbg !111
  br label %if.end.41, !dbg !113

if.end.41:                                        ; preds = %if.then.39, %for.body.37
  %i2.3 = phi i32 [ %sub40, %if.then.39 ], [ %i2.2, %for.body.37 ]
  %mul42 = mul nsw i32 %j2.3, %input_rows, !dbg !114
  %add43 = add nsw i32 %mul42, %i2.3, !dbg !115
  %idxprom44 = sext i32 %add43 to i64, !dbg !116
  %arrayidx45 = getelementptr inbounds float, float* %input, i64 %idxprom44, !dbg !116
  %tmp2 = load float, float* %arrayidx45, align 4, !dbg !116
  %mul46 = mul nsw i32 %j.1, %output_rows, !dbg !117
  %add47 = add nsw i32 %mul46, %i.1, !dbg !118
  %idxprom48 = sext i32 %add47 to i64, !dbg !119
  %arrayidx49 = getelementptr inbounds float, float* %output, i64 %idxprom48, !dbg !119
  store float %tmp2, float* %arrayidx49, align 4, !dbg !120
  %mul50 = mul nsw i32 %j2.3, %input_rows, !dbg !121
  %add51 = add nsw i32 %mul50, %i2.3, !dbg !122
  %idxprom52 = sext i32 %add51 to i64, !dbg !123
  %arrayidx53 = getelementptr inbounds float, float* %input, i64 %idxprom52, !dbg !123
  %tmp3 = load float, float* %arrayidx53, align 4, !dbg !123
  %mul54 = mul nsw i32 %j.1, %output_rows, !dbg !124
  %add55 = add nsw i32 %mul54, %i.1, !dbg !125
  %idxprom56 = sext i32 %add55 to i64, !dbg !126
  %arrayidx57 = getelementptr inbounds float, float* %output_cpu, i64 %idxprom56, !dbg !126
  store float %tmp3, float* %arrayidx57, align 4, !dbg !127
  br label %for.inc.58, !dbg !128

for.inc.58:                                       ; preds = %if.end.41
  %inc59 = add nsw i32 %i.1, 1, !dbg !129
  %inc60 = add nsw i32 %i2.3, 1, !dbg !130
  br label %for.cond.35, !dbg !131

for.end.61:                                       ; preds = %for.cond.35
  br label %for.inc.62, !dbg !132

for.inc.62:                                       ; preds = %for.end.61
  %inc63 = add nsw i32 %j.1, 1, !dbg !133
  %inc64 = add nsw i32 %j2.3, 1, !dbg !134
  br label %for.cond.28, !dbg !135

for.end.65:                                       ; preds = %for.cond.28
  br label %if.end.66

if.end.66:                                        ; preds = %for.end.65, %for.end.27
  ret void, !dbg !136
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10, !11}
!llvm.ident = !{!12}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/lge/dawn-3.7/UniBench/benchmarks//Rodinia/srad/src/resize.c", directory: "/home/gleison/lge/llvm-3.7-src/build-debug/bin")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "resize", scope: !1, file: !1, line: 8, type: !5, isLocal: false, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, function: void (float*, i32, i32, float*, float*, i32, i32, i32)* @resize, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !9, !9, !7, !7, !9, !9, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !{i32 2, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!13 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input", arg: 1, scope: !4, file: !1, line: 8, type: !7)
!14 = !DIExpression()
!15 = !DILocation(line: 8, column: 18, scope: !4)
!16 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input_rows", arg: 2, scope: !4, file: !1, line: 9, type: !9)
!17 = !DILocation(line: 9, column: 10, scope: !4)
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input_cols", arg: 3, scope: !4, file: !1, line: 10, type: !9)
!19 = !DILocation(line: 10, column: 10, scope: !4)
!20 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "output", arg: 4, scope: !4, file: !1, line: 11, type: !7)
!21 = !DILocation(line: 11, column: 10, scope: !4)
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "output_cpu", arg: 5, scope: !4, file: !1, line: 12, type: !7)
!23 = !DILocation(line: 12, column: 10, scope: !4)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "output_rows", arg: 6, scope: !4, file: !1, line: 13, type: !9)
!25 = !DILocation(line: 13, column: 10, scope: !4)
!26 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "output_cols", arg: 7, scope: !4, file: !1, line: 14, type: !9)
!27 = !DILocation(line: 14, column: 10, scope: !4)
!28 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "major", arg: 8, scope: !4, file: !1, line: 15, type: !9)
!29 = !DILocation(line: 15, column: 10, scope: !4)
!30 = !DILocation(line: 32, column: 11, scope: !31)
!31 = distinct !DILexicalBlock(scope: !4, file: !1, line: 32, column: 5)
!32 = !DILocation(line: 32, column: 5, scope: !4)
!33 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i2", scope: !4, file: !1, line: 22, type: !9)
!34 = !DILocation(line: 22, column: 6, scope: !4)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j2", scope: !4, file: !1, line: 22, type: !9)
!36 = !DILocation(line: 22, column: 10, scope: !4)
!37 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !4, file: !1, line: 21, type: !9)
!38 = !DILocation(line: 21, column: 9, scope: !4)
!39 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !4, file: !1, line: 21, type: !9)
!40 = !DILocation(line: 21, column: 6, scope: !4)
!41 = !DILocation(line: 34, column: 7, scope: !42)
!42 = distinct !DILexicalBlock(scope: !43, file: !1, line: 34, column: 3)
!43 = distinct !DILexicalBlock(scope: !31, file: !1, line: 32, column: 16)
!44 = !DILocation(line: 34, column: 19, scope: !45)
!45 = distinct !DILexicalBlock(scope: !42, file: !1, line: 34, column: 3)
!46 = !DILocation(line: 34, column: 3, scope: !42)
!47 = !DILocation(line: 35, column: 9, scope: !48)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 35, column: 7)
!49 = distinct !DILexicalBlock(scope: !45, file: !1, line: 34, column: 43)
!50 = !DILocation(line: 35, column: 7, scope: !49)
!51 = !DILocation(line: 36, column: 13, scope: !52)
!52 = distinct !DILexicalBlock(scope: !48, file: !1, line: 35, column: 22)
!53 = !DILocation(line: 37, column: 4, scope: !52)
!54 = !DILocation(line: 38, column: 8, scope: !55)
!55 = distinct !DILexicalBlock(scope: !49, file: !1, line: 38, column: 4)
!56 = !DILocation(line: 38, column: 20, scope: !57)
!57 = distinct !DILexicalBlock(scope: !55, file: !1, line: 38, column: 4)
!58 = !DILocation(line: 38, column: 4, scope: !55)
!59 = !DILocation(line: 39, column: 10, scope: !60)
!60 = distinct !DILexicalBlock(scope: !61, file: !1, line: 39, column: 8)
!61 = distinct !DILexicalBlock(scope: !57, file: !1, line: 38, column: 44)
!62 = !DILocation(line: 39, column: 8, scope: !61)
!63 = !DILocation(line: 40, column: 14, scope: !64)
!64 = distinct !DILexicalBlock(scope: !60, file: !1, line: 39, column: 23)
!65 = !DILocation(line: 41, column: 5, scope: !64)
!66 = !DILocation(line: 42, column: 39, scope: !61)
!67 = !DILocation(line: 42, column: 50, scope: !61)
!68 = !DILocation(line: 42, column: 31, scope: !61)
!69 = !DILocation(line: 42, column: 13, scope: !61)
!70 = !DILocation(line: 42, column: 25, scope: !61)
!71 = !DILocation(line: 42, column: 5, scope: !61)
!72 = !DILocation(line: 42, column: 29, scope: !61)
!73 = !DILocation(line: 43, column: 43, scope: !61)
!74 = !DILocation(line: 43, column: 54, scope: !61)
!75 = !DILocation(line: 43, column: 35, scope: !61)
!76 = !DILocation(line: 43, column: 17, scope: !61)
!77 = !DILocation(line: 43, column: 29, scope: !61)
!78 = !DILocation(line: 43, column: 5, scope: !61)
!79 = !DILocation(line: 43, column: 33, scope: !61)
!80 = !DILocation(line: 44, column: 4, scope: !61)
!81 = !DILocation(line: 38, column: 35, scope: !57)
!82 = !DILocation(line: 38, column: 41, scope: !57)
!83 = !DILocation(line: 38, column: 4, scope: !57)
!84 = !DILocation(line: 45, column: 3, scope: !49)
!85 = !DILocation(line: 34, column: 34, scope: !45)
!86 = !DILocation(line: 34, column: 40, scope: !45)
!87 = !DILocation(line: 34, column: 3, scope: !45)
!88 = !DILocation(line: 47, column: 2, scope: !43)
!89 = !DILocation(line: 55, column: 7, scope: !90)
!90 = distinct !DILexicalBlock(scope: !91, file: !1, line: 55, column: 3)
!91 = distinct !DILexicalBlock(scope: !31, file: !1, line: 53, column: 6)
!92 = !DILocation(line: 55, column: 19, scope: !93)
!93 = distinct !DILexicalBlock(scope: !90, file: !1, line: 55, column: 3)
!94 = !DILocation(line: 55, column: 3, scope: !90)
!95 = !DILocation(line: 56, column: 9, scope: !96)
!96 = distinct !DILexicalBlock(scope: !97, file: !1, line: 56, column: 7)
!97 = distinct !DILexicalBlock(scope: !93, file: !1, line: 55, column: 43)
!98 = !DILocation(line: 56, column: 7, scope: !97)
!99 = !DILocation(line: 57, column: 13, scope: !100)
!100 = distinct !DILexicalBlock(scope: !96, file: !1, line: 56, column: 22)
!101 = !DILocation(line: 58, column: 4, scope: !100)
!102 = !DILocation(line: 59, column: 8, scope: !103)
!103 = distinct !DILexicalBlock(scope: !97, file: !1, line: 59, column: 4)
!104 = !DILocation(line: 59, column: 20, scope: !105)
!105 = distinct !DILexicalBlock(scope: !103, file: !1, line: 59, column: 4)
!106 = !DILocation(line: 59, column: 4, scope: !103)
!107 = !DILocation(line: 60, column: 10, scope: !108)
!108 = distinct !DILexicalBlock(scope: !109, file: !1, line: 60, column: 8)
!109 = distinct !DILexicalBlock(scope: !105, file: !1, line: 59, column: 44)
!110 = !DILocation(line: 60, column: 8, scope: !109)
!111 = !DILocation(line: 61, column: 14, scope: !112)
!112 = distinct !DILexicalBlock(scope: !108, file: !1, line: 60, column: 23)
!113 = !DILocation(line: 62, column: 5, scope: !112)
!114 = !DILocation(line: 63, column: 39, scope: !109)
!115 = !DILocation(line: 63, column: 50, scope: !109)
!116 = !DILocation(line: 63, column: 31, scope: !109)
!117 = !DILocation(line: 63, column: 13, scope: !109)
!118 = !DILocation(line: 63, column: 25, scope: !109)
!119 = !DILocation(line: 63, column: 5, scope: !109)
!120 = !DILocation(line: 63, column: 29, scope: !109)
!121 = !DILocation(line: 64, column: 43, scope: !109)
!122 = !DILocation(line: 64, column: 54, scope: !109)
!123 = !DILocation(line: 64, column: 35, scope: !109)
!124 = !DILocation(line: 64, column: 17, scope: !109)
!125 = !DILocation(line: 64, column: 29, scope: !109)
!126 = !DILocation(line: 64, column: 5, scope: !109)
!127 = !DILocation(line: 64, column: 33, scope: !109)
!128 = !DILocation(line: 65, column: 4, scope: !109)
!129 = !DILocation(line: 59, column: 35, scope: !105)
!130 = !DILocation(line: 59, column: 41, scope: !105)
!131 = !DILocation(line: 59, column: 4, scope: !105)
!132 = !DILocation(line: 66, column: 3, scope: !97)
!133 = !DILocation(line: 55, column: 34, scope: !93)
!134 = !DILocation(line: 55, column: 40, scope: !93)
!135 = !DILocation(line: 55, column: 3, scope: !93)
!136 = !DILocation(line: 70, column: 1, scope: !4)
